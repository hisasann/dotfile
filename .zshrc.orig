# 文字コードの設定
export LANG=ja_JP.UTF-8

# viのキーバインド
bindkey -v

# パスの設定
PATH=/usr/local/bin:$PATH
PATH=~//bin:$PATH
export MANPATH=/usr/local/share/man:/usr/local/man:/usr/share/man
# Sublime Text 2
export EDITOR='subl -w'

# symbolicatecrash用
export DEVELOPER_DIR="/Applications/XCode.app/Contents/Developer"

# gisty
export GISTY_DIR="$HOME/_/dev/gists"

# 関数
find-grep () { find . -type f -print | xargs grep -n --binary-files=without-match $@ }

export LSCOLORS=exfxcxdxbxegedabagacad
export LS_COLORS='di=34:ln=35:so=32:pi=33:ex=31:bd=46;34:cd=43;34:su=41;30:sg=46;30:tw=42;30:ow=43;30'
zstyle ':completion:*' list-colors 'di=34' 'ln=35' 'so=32' 'ex=31' 'bd=46;34' 'cd=43;34'

# ~/.zshenv, ~/.bash_profile などに以下を追加
# source ~/.nvm/nvm.sh
# nvm use "v0.9.0"
# npm_dir=${NVM_PATH}_modules
# export NODE_PATH=$npm_dir

# nodebrew
export PATH=$HOME/.nodebrew/current/bin:$PATH

# yarn
export PATH="$PATH:`yarn global bin`"

# go
export GOPATH=$HOME/_/code/golang
PATH=$PATH:$GOPATH/bin

# zaw
autoload -Uz chpwd_recent_dirs cdr add-zsh-hook
add-zsh-hook chpwd chpwd_recent_dirs
zstyle ':chpwd:*' recent-dirs-max 500 # cdrの履歴を保存する個数
zstyle ':chpwd:*' recent-dirs-default yes
zstyle ':completion:*' recent-dirs-insert both

source ~/Dropbox/tool/zaw/zaw.zsh
zstyle ':filter-select:highlight' selected fg=black,bg=white,standout
zstyle ':filter-select' case-insensitive yes

bindkey '^@' zaw-cdr
bindkey '^R' zaw-history
bindkey '^F' zaw-git-files
bindkey '^B' zaw-git-branches
bindkey '^X^P' zaw-process
bindkey '^A' zaw-tmux

# rvmからrbenvへ
# [[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm" # Load RVM into a shell session *as a function*
# [[ -s "$HOME/.rvm/scripts/rvm" ]] && . "$HOME/.rvm/scripts/rvm" # Load RVM function

# PATH=$PATH:$HOME/.rvm/bin # Add RVM to PATH for scripting

export PATH="$HOME/.rbenv/bin:$PATH"
eval "$(rbenv init -)"

# Android/tools
export PATH="$HOME/Library/Android/sdk/tools:$PATH"

# エイリアスの設定
alias ls="ls -GvF"
alias l="ls -G"
alias ll="ls -Gl"
alias la="ls -Gla"
alias ip="ifconfig | grep 192.*"
alias du="du -sh"
alias df="df -h"
alias vi="/Applications/MacVim.app/Contents/MacOS/Vim -g --remote-tab-silent"
alias vim="/Applications/MacVim.app/Contents/MacOS/Vim -g --remote-tab-silent"
alias macvim="/Applications/MacVim.app/Contents/MacOS/Vim -g --remote-tab-silent"
alias safari="open -a Safari"
alias chrome="open -a Google\ Chrome"
alias symbolicatecrash="/Applications/Xcode.app/Contents/Developer//Platforms/iPhoneOS.platform/Developer/Library/PrivateFrameworks/DTDeviceKit.framework/Versions/A/Resources/symbolicatecrash"
alias today='date +%Y%m%d'
alias unity='open -n /Applications/Unity/Unity.app'
alias swift='/Applications/Xcode6-Beta.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/swift'

# git
# oh-my-zshに取られた
# https://github.com/robbyrussell/oh-my-zsh/blob/master/plugins/git/git.plugin.zsh
alias gst='git status -sb && git stash list'
alias glgg='git logg'
alias gcm='git cs'
alias gpom='git pom'
alias gpod='git pod'

# 楽ちん！
alias cd="pushd"
alias bd="popd"

# プロンプトの色の設定
# not working on prezto
# autoload colors
# colors
# case ${UID} in
# 0)
#   PROMPT="%B%{${fg[red]}%}%/#%{${reset_color}%}%b "
#   PROMPT2="%B%{${fg[red]}%}%_#%{${reset_color}%}%b "
#   SPROMPT="%B%{${fg[red]}%}%r is correct? [n,y,a,e]:%{${reset_color}%}%b "
#   [ -n "${REMOTEHOST}${SSH_CONNECTION}" ] &&
#     PROMPT="%{${fg[white]}%}${HOST%%.*} ${PROMPT}"
#   ;;
# *)
#   PROMPT="%{${fg[red]}%}%/%%%{${reset_color}%} "
#   PROMPT2="%{${fg[red]}%}%_%%%{${reset_color}%} "
#   SPROMPT="%{${fg[red]}%}%r is correct? [n,y,a,e]:%{${reset_color}%} "
#   [ -n "${REMOTEHOST}${SSH_CONNECTION}" ] &&
#     PROMPT="%{${fg[white]}%}${HOST%%.*} ${PROMPT}"
#   ;;
# esac
#
# # タイトル
# case "${TERM}" in
# kterm*|xterm)
#     precmd() {
#         echo -ne "\033]0;${USER}@${HOST%%.*}:${PWD}\007"
#     }
#     ;;
# esac

# コマンド補完
autoload -U compinit
compinit -u

# コマンド予測
autoload predict-on
# predict-off
predict-on

# cdの履歴を表示
setopt autopushd

# 補完候補が複数ある時に、一覧表示
setopt auto_list

# 保管結果をできるだけ詰める
setopt list_packed

# 補完キー（Tab, Ctrl+I) を連打するだけで順に補完候補を自動で補完
setopt auto_menu

# ビープ音を鳴らさないようにする
setopt no_beep

# ディレクトリを水色にする｡
export LS_COLORS='di=01;36'

# cd をしたときにlsを実行する
function chpwd() { ls }

# ディレクトリ名だけで､ディレクトリの移動をする｡
setopt auto_cd

# cdの履歴を保存する
# cd -TAB
setopt auto_pushd

# コマンドを間違えたら教えてくれる
setopt correct

# コマンド履歴
autoload history-search-end
zle -N history-beginning-search-backward-end history-search-end
zle -N history-beginning-search-forward-end history-search-end
bindkey "^P" history-beginning-search-backward-end
bindkey "^N" history-beginning-search-forward-end

# ヒストリー
HISTFILE=~/.zsh_history
HISTSIZE=10000
SAVEHIST=10000
setopt share_history
# 直前と同じコマンドラインはヒストリに追加しない
setopt hist_ignore_dups
# ヒストリにhistoryコマンドを記録しない
setopt hist_no_store
# 余分なスペースを削除してヒストリに記録する
setopt hist_reduce_blanks

#
# Show branch name in Zsh's right prompt
#

# autoload -Uz VCS_INFO_get_data_git; VCS_INFO_get_data_git 2> /dev/null

# function rprompt-git-current-branch {
#     local name st color gitdir action
#     if [[ "$PWD" =~ '/¥.git(/.*)?$' ]]; then
#             return
#     fi
#     name=`git rev-parse --abbrev-ref=loose HEAD 2> /dev/null`
#     if [[ -z $name ]]; then
#             return
#     fi

#     gitdir=`git rev-parse --git-dir 2> /dev/null`
#     action=`VCS_INFO_git_getaction "$gitdir"` && action="($action)"

#     st=`git status 2> /dev/null`
#     if [[ -n `echo "$st" | grep "^nothing to"` ]]; then
#             color=%F{green}
#     elif [[ -n `echo "$st" | grep "^nothing added"` ]]; then
#             color=%F{yellow}
#     elif [[ -n `echo "$st" | grep "^# Untracked"` ]]; then
#             color=%B%F{red}
#     else
#                 color=%F{red}
#         fi

#     echo "$color$name$action%f%b "
# }

# setopt prompt_subst

# RPROMPT='[`rprompt-git-current-branch`%~]'

# git
autoload bashcompinit
bashcompinit
# source /usr/local/Cellar/git/1.8.0/etc/bash_completion.d/git-completion.bash

###-begin-npm-completion-###
#
# npm command completion script
#
# Installation: npm completion >> ~/.bashrc  (or ~/.zshrc)
# Or, maybe: npm completion > /usr/local/etc/bash_completion.d/npm
#

COMP_WORDBREAKS=${COMP_WORDBREAKS/=/}
COMP_WORDBREAKS=${COMP_WORDBREAKS/@/}
export COMP_WORDBREAKS

if type complete &>/dev/null; then
  _npm_completion () {
    local si="$IFS"
    IFS=$'\n' COMPREPLY=($(COMP_CWORD="$COMP_CWORD" \
                           COMP_LINE="$COMP_LINE" \
                           COMP_POINT="$COMP_POINT" \
                           npm completion -- "${COMP_WORDS[@]}" \
                           2>/dev/null)) || return $?
    IFS="$si"
  }
  complete -F _npm_completion npm
elif type compdef &>/dev/null; then
  _npm_completion() {
    si=$IFS
    compadd -- $(COMP_CWORD=$((CURRENT-1)) \
                 COMP_LINE=$BUFFER \
                 COMP_POINT=0 \
                 npm completion -- "${words[@]}" \
                 2>/dev/null)
    IFS=$si
  }
  compdef _npm_completion npm
elif type compctl &>/dev/null; then
  _npm_completion () {
    local cword line point words si
    read -Ac words
    read -cn cword
    let cword-=1
    read -l line
    read -ln point
    si="$IFS"
    IFS=$'\n' reply=($(COMP_CWORD="$cword" \
                       COMP_LINE="$line" \
                       COMP_POINT="$point" \
                       npm completion -- "${words[@]}" \
                       2>/dev/null)) || return $?
    IFS="$si"
  }
  compctl -K _npm_completion npm
fi
###-end-npm-completion-###

# peco and z
function peco-z-search
{
  which peco z > /dev/null
  if [ $? -ne 0 ]; then
    echo "Please install peco and z"
    return 1
  fi
  local res=$(z | sort -rn | cut -c 12- | peco)
  if [ -n "$res" ]; then
    BUFFER+="cd $res"
    zle accept-line
  else
    return 1
  fi
}
zle -N peco-z-search
bindkey '^f' peco-z-search

# local zshrc
source ~/.zshrc.local

### Added by the Heroku Toolbelt
export PATH="/usr/local/heroku/bin:$PATH"

# for z
source ~/.zsh.d/z.sh

