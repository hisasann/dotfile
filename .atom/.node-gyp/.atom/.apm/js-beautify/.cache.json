{"_id":"js-beautify","_rev":"66-8ab387c2607ceb7fa22e03b8021806d0","name":"js-beautify","description":"jsbeautifier.org for node","dist-tags":{"latest":"1.4.2"},"versions":{"0.1.8":{"name":"js-beautify","version":"0.1.8","description":"jsbeautifier.org for node","main":"beautify.js","preferGlobal":true,"bin":{"js-beautify":"./cli.js"},"directories":{"test":"tests"},"scripts":{"test":"./tests/beautify-tests.js"},"repository":{"type":"git","url":"git://github.com/evocateur/js-beautify.git#node-package"},"keywords":["beautify","beautifier","code-quality"],"author":{"name":"Einar Lielmanis","email":"einar@jsbeautifier.org"},"contributors":[{"name":"Vital Batmanov","email":"vital76@gmail.com"},{"name":"Chris J. Shull","email":"chrisjshull@gmail.com"},{"name":"Gian Marco Gherardi","email":"gianmarco.gherardi@gmail.com"},{"name":"Stan","email":"stasson@orc.ru"},{"name":"Vittorio Gambaletta","email":"VittGam@vittgam.net"},{"name":"Daniel Stockman","email":"daniel.stockman@gmail.com"}],"license":"MIT","engines":{"node":">=0.6.x"},"engineStrict":true,"dependencies":{"optimist":"~0.3.4"},"readme":"# JS Beautifier\n\n...or, more specifically, all of the code powering\n[jsbeautifier.org](http://jsbeautifier.org/).\n\nThis little beautifier will reformat and reindent bookmarklets, ugly\nJavaScript, unpack scripts packed by Dean Edward’s popular packer,\nas well as deobfuscate scripts processed by\n[javascriptobfuscator.com](http://javascriptobfuscator.com/).\n\n## Usage\n\nTo beautify from the command-line you can use the provided Python script/library or [npm](http://npmjs.org/) package.\n\n### Python\n\n`./js-beautify file.js` beautifies a file, output goes to `stdout`.\n\nTo use `jsbeautifier` as a library is simple:\n\n``` python\nimport jsbeautifier\nres = jsbeautifier.beautify('your javascript string')\nres = jsbeautifier.beautify_file('some_file.js')\n```\n\n...or, to specify some options:\n\n``` python\nopts = jsbeautifier.default_options()\nopts.indent_size = 2\nres = jsbeautifier.beautify('some javascript', opts)\n```\n\n### JavaScript\n\nAs an alternative to the Python script, you may install the NPM package `js-beautify`. When installed globally, it provides an executable `js-beautify` script. As with the Python script, the beautified result is sent to `stdout` unless otherwise configured.\n\n```bash\n$ npm -g install js-beautify\n$ js-beautify foo.js\n```\n\nYou can also use `js-beautify` as a `node` library (install locally, the `npm` default):\n\n```bash\n$ npm install js-beautify\n```\n\n```js\nvar beautify = require('js-beautify').js_beautify,\n    fs = require('fs');\n\nfs.readFile('foo.js', 'utf8', function (err, data) {\n    if (err) {\n        throw err;\n    }\n    console.log(beautify(data, { indent_size: 2 }));\n});\n```\n\n### Options\n\nThese are the command-line flags for both Python and JS scripts:\n\n    CLI Options:\n      -f, --file                    Input file(s) (Pass '-' for stdin). These can also be passed directly.\n      -r, --replace                 Write output in-place, replacing input\n      -o, --outfile                 Write output to file (default stdout)\n    \n    Beautifier Options:\n      -s, --indent-size             Indentation size [default: 4]\n      -c, --indent-char             Indentation character [default: \" \"]\n      -l, --indent-level            Initial indentation level [default: 0]\n      -t, --indent-with-tabs        Indent with tabs, overrides -s and -c\n      -p, --preserve-newlines       Preserve existing line-breaks (--no-preserve-newlines disables) [default: true]\n      -m, --max-preserve-newlines   Maximum number of line-breaks to be preserved in one chunk [default: 10]\n      -j, --jslint-happy            Enable jslint-stricter mode\n      -b, --brace-style             Brace style [collapse|expand|end-expand|expand-strict] [default: \"collapse\"]\n      -k, --keep-array-indentation  Preserve array indentation\n      -a, --indent-case             Indent case inside switch\n      -x, --unescape-strings        Decode printable characters encoded in xNN notation\n\nThese correspond to underscored option keys for both library interfaces:\n\n    defaults = {\n        \"indent_size\": 4,\n        \"indent_char\": \" \",\n        \"indent_level\": 0,\n        \"indent_with_tabs\": false,\n        \"preserve_newlines\": true,\n        \"max_preserve_newlines\": 10,\n        \"jslint_happy\": false,\n        \"brace_style\": \"collapse\",\n        \"keep_array_indentation\": false,\n        \"keep_function_indentation\": false,\n        \"space_before_conditional\": true,\n        \"eval_code\": false,\n        \"indent_case\": false,\n        \"unescape_strings\": false\n    }\n\nYou might notice that the CLI options and defaults hash aren't 100% correlated. Historically, the Python and JS APIs have not been 100% identical. For example, `space_before_conditional` is currently JS-only, and not addressable from the CLI script. There are a few other additional cases keeping us from 100% API-compatibility. Patches welcome!\n\n## License\n\nYou are free to use this in any way you want, in case you find this\nuseful or working for you. (MIT)\n\n## Credits\n\nWritten by Einar Lielmanis, <einar@jsbeautifier.org>\nPython version flourished by Stefano Sanfilippo <a.little.coder@gmail.com>\n\nThanks to Jason Diamond, Patrick Hof, Nochum Sossonko, Andreas Schneider, Dave\nVasilevsky, Vital Batmanov, Ron Baldwin, Gabriel Harrison, Chris J. Shull,\nMathias Bynens, Vittorio Gambaletta and others.\n","_id":"js-beautify@0.1.8","dist":{"shasum":"f2519ce18a2c8898a58c13088fec09263bbd1091","tarball":"http://registry.npmjs.org/js-beautify/-/js-beautify-0.1.8.tgz"},"maintainers":[{"name":"evocateur","email":"daniel.stockman@gmail.com"}],"deprecated":"major indenting and html bug fixes in 1.4.0."},"0.2.0":{"name":"js-beautify","version":"0.2.0","description":"jsbeautifier.org for node","main":"beautify.js","preferGlobal":true,"bin":{"js-beautify":"./cli.js"},"directories":{"test":"tests"},"scripts":{"test":"./tests/beautify-tests.js"},"repository":{"type":"git","url":"git://github.com/evocateur/js-beautify.git#node-package"},"keywords":["beautify","beautifier","code-quality"],"author":{"name":"Einar Lielmanis","email":"einar@jsbeautifier.org"},"contributors":[{"name":"Vital Batmanov","email":"vital76@gmail.com"},{"name":"Chris J. Shull","email":"chrisjshull@gmail.com"},{"name":"Gian Marco Gherardi","email":"gianmarco.gherardi@gmail.com"},{"name":"Stan","email":"stasson@orc.ru"},{"name":"Vittorio Gambaletta","email":"VittGam@vittgam.net"},{"name":"Daniel Stockman","email":"daniel.stockman@gmail.com"}],"license":"MIT","dependencies":{"optimist":"~0.3.4"},"readme":"# JS Beautifier\n\n...or, more specifically, all of the code powering\n[jsbeautifier.org](http://jsbeautifier.org/).\n\nThis little beautifier will reformat and reindent bookmarklets, ugly\nJavaScript, unpack scripts packed by Dean Edward’s popular packer,\nas well as deobfuscate scripts processed by\n[javascriptobfuscator.com](http://javascriptobfuscator.com/).\n\n## Usage\n\nTo beautify from the command-line you can use the provided Python script/library or [npm](http://npmjs.org/) package.\n\n### Python\n\n`./js-beautify file.js` beautifies a file, output goes to `stdout`.\n\nTo use `jsbeautifier` as a library is simple:\n\n``` python\nimport jsbeautifier\nres = jsbeautifier.beautify('your javascript string')\nres = jsbeautifier.beautify_file('some_file.js')\n```\n\n...or, to specify some options:\n\n``` python\nopts = jsbeautifier.default_options()\nopts.indent_size = 2\nres = jsbeautifier.beautify('some javascript', opts)\n```\n\n### JavaScript\n\nAs an alternative to the Python script, you may install the NPM package `js-beautify`. When installed globally, it provides an executable `js-beautify` script. As with the Python script, the beautified result is sent to `stdout` unless otherwise configured.\n\n```bash\n$ npm -g install js-beautify\n$ js-beautify foo.js\n```\n\nYou can also use `js-beautify` as a `node` library (install locally, the `npm` default):\n\n```bash\n$ npm install js-beautify\n```\n\n```js\nvar beautify = require('js-beautify').js_beautify,\n    fs = require('fs');\n\nfs.readFile('foo.js', 'utf8', function (err, data) {\n    if (err) {\n        throw err;\n    }\n    console.log(beautify(data, { indent_size: 2 }));\n});\n```\n\n### Options\n\nThese are the command-line flags for both Python and JS scripts:\n\n    CLI Options:\n      -f, --file                    Input file(s) (Pass '-' for stdin). These can also be passed directly.\n      -r, --replace                 Write output in-place, replacing input\n      -o, --outfile                 Write output to file (default stdout)\n    \n    Beautifier Options:\n      -s, --indent-size             Indentation size [default: 4]\n      -c, --indent-char             Indentation character [default: \" \"]\n      -l, --indent-level            Initial indentation level [default: 0]\n      -t, --indent-with-tabs        Indent with tabs, overrides -s and -c\n      -p, --preserve-newlines       Preserve existing line-breaks (--no-preserve-newlines disables) [default: true]\n      -m, --max-preserve-newlines   Maximum number of line-breaks to be preserved in one chunk [default: 10]\n      -j, --jslint-happy            Enable jslint-stricter mode\n      -b, --brace-style             Brace style [collapse|expand|end-expand|expand-strict] [default: \"collapse\"]\n      -k, --keep-array-indentation  Preserve array indentation\n      -a, --indent-case             Indent case inside switch\n      -x, --unescape-strings        Decode printable characters encoded in xNN notation\n\nThese correspond to underscored option keys for both library interfaces:\n\n    defaults = {\n        \"indent_size\": 4,\n        \"indent_char\": \" \",\n        \"indent_level\": 0,\n        \"indent_with_tabs\": false,\n        \"preserve_newlines\": true,\n        \"max_preserve_newlines\": 10,\n        \"jslint_happy\": false,\n        \"brace_style\": \"collapse\",\n        \"keep_array_indentation\": false,\n        \"keep_function_indentation\": false,\n        \"space_before_conditional\": true,\n        \"eval_code\": false,\n        \"indent_case\": false,\n        \"unescape_strings\": false\n    }\n\nYou might notice that the CLI options and defaults hash aren't 100% correlated. Historically, the Python and JS APIs have not been 100% identical. For example, `space_before_conditional` is currently JS-only, and not addressable from the CLI script. There are a few other additional cases keeping us from 100% API-compatibility. Patches welcome!\n\n## License\n\nYou are free to use this in any way you want, in case you find this\nuseful or working for you. (MIT)\n\n## Credits\n\nWritten by Einar Lielmanis, <einar@jsbeautifier.org>\nPython version flourished by Stefano Sanfilippo <a.little.coder@gmail.com>\n\nThanks to Jason Diamond, Patrick Hof, Nochum Sossonko, Andreas Schneider, Dave\nVasilevsky, Vital Batmanov, Ron Baldwin, Gabriel Harrison, Chris J. Shull,\nMathias Bynens, Vittorio Gambaletta and others.\n","_id":"js-beautify@0.2.0","dist":{"shasum":"9737cbfa8cb09c626d600a1c7b8b54d77a047c2e","tarball":"http://registry.npmjs.org/js-beautify/-/js-beautify-0.2.0.tgz"},"maintainers":[{"name":"evocateur","email":"daniel.stockman@gmail.com"}],"deprecated":"major indenting and html bug fixes in 1.4.0."},"0.2.1":{"name":"js-beautify","version":"0.2.1","description":"jsbeautifier.org for node","main":"beautify.js","preferGlobal":true,"bin":{"js-beautify":"./cli.js"},"directories":{"test":"tests"},"scripts":{"test":"./tests/beautify-tests.js"},"repository":{"type":"git","url":"git://github.com/evocateur/js-beautify.git#node-package.git"},"keywords":["beautify","beautifier","code-quality"],"author":{"name":"Einar Lielmanis","email":"einar@jsbeautifier.org"},"contributors":[{"name":"Vital Batmanov","email":"vital76@gmail.com"},{"name":"Chris J. Shull","email":"chrisjshull@gmail.com"},{"name":"Gian Marco Gherardi","email":"gianmarco.gherardi@gmail.com"},{"name":"Stan","email":"stasson@orc.ru"},{"name":"Vittorio Gambaletta","email":"VittGam@vittgam.net"},{"name":"Daniel Stockman","email":"daniel.stockman@gmail.com"}],"license":"MIT","dependencies":{"optimist":"~0.3.4"},"_npmUser":{"name":"evocateur","email":"daniel.stockman@gmail.com"},"_id":"js-beautify@0.2.1","devDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.0.106","_nodeVersion":"v0.4.12","_defaultsLoaded":true,"dist":{"shasum":"501e8a8b2f272afefc3f85bc54f82a16ebde25a0","tarball":"http://registry.npmjs.org/js-beautify/-/js-beautify-0.2.1.tgz"},"maintainers":[{"name":"evocateur","email":"daniel.stockman@gmail.com"}],"deprecated":"major indenting and html bug fixes in 1.4.0."},"0.2.2":{"name":"js-beautify","version":"0.2.2","description":"jsbeautifier.org for node","main":"beautify.js","preferGlobal":true,"bin":{"js-beautify":"./cli.js"},"directories":{"test":"tests"},"scripts":{"test":"./tests/beautify-tests.js"},"repository":{"type":"git","url":"git://github.com/evocateur/js-beautify.git#node-package"},"keywords":["beautify","beautifier","code-quality"],"author":{"name":"Einar Lielmanis","email":"einar@jsbeautifier.org"},"contributors":[{"name":"Vital Batmanov","email":"vital76@gmail.com"},{"name":"Chris J. Shull","email":"chrisjshull@gmail.com"},{"name":"Gian Marco Gherardi","email":"gianmarco.gherardi@gmail.com"},{"name":"Stan","email":"stasson@orc.ru"},{"name":"Vittorio Gambaletta","email":"VittGam@vittgam.net"},{"name":"Daniel Stockman","email":"daniel.stockman@gmail.com"}],"license":"MIT","dependencies":{"optimist":"~0.3.4"},"readme":"# JS Beautifier\n\n...or, more specifically, all of the code powering\n[jsbeautifier.org](http://jsbeautifier.org/).\n\nThis little beautifier will reformat and reindent bookmarklets, ugly\nJavaScript, unpack scripts packed by Dean Edward’s popular packer,\nas well as deobfuscate scripts processed by\n[javascriptobfuscator.com](http://javascriptobfuscator.com/).\n\n## Usage\n\nTo beautify from the command-line you can use the provided Python script/library or [npm](http://npmjs.org/) package.\n\n### Python\n\n`./js-beautify file.js` beautifies a file, output goes to `stdout`.\n\nTo use `jsbeautifier` as a library is simple:\n\n``` python\nimport jsbeautifier\nres = jsbeautifier.beautify('your javascript string')\nres = jsbeautifier.beautify_file('some_file.js')\n```\n\n...or, to specify some options:\n\n``` python\nopts = jsbeautifier.default_options()\nopts.indent_size = 2\nres = jsbeautifier.beautify('some javascript', opts)\n```\n\n### JavaScript\n\nAs an alternative to the Python script, you may install the NPM package `js-beautify`. When installed globally, it provides an executable `js-beautify` script. As with the Python script, the beautified result is sent to `stdout` unless otherwise configured.\n\n```bash\n$ npm -g install js-beautify\n$ js-beautify foo.js\n```\n\nYou can also use `js-beautify` as a `node` library (install locally, the `npm` default):\n\n```bash\n$ npm install js-beautify\n```\n\n```js\nvar beautify = require('js-beautify').js_beautify,\n    fs = require('fs');\n\nfs.readFile('foo.js', 'utf8', function (err, data) {\n    if (err) {\n        throw err;\n    }\n    console.log(beautify(data, { indent_size: 2 }));\n});\n```\n\n### Options\n\nThese are the command-line flags for both Python and JS scripts:\n\n    CLI Options:\n      -f, --file                    Input file(s) (Pass '-' for stdin). These can also be passed directly.\n      -r, --replace                 Write output in-place, replacing input\n      -o, --outfile                 Write output to file (default stdout)\n    \n    Beautifier Options:\n      -s, --indent-size             Indentation size [default: 4]\n      -c, --indent-char             Indentation character [default: \" \"]\n      -l, --indent-level            Initial indentation level [default: 0]\n      -t, --indent-with-tabs        Indent with tabs, overrides -s and -c\n      -p, --preserve-newlines       Preserve existing line-breaks (--no-preserve-newlines disables) [default: true]\n      -m, --max-preserve-newlines   Maximum number of line-breaks to be preserved in one chunk [default: 10]\n      -j, --jslint-happy            Enable jslint-stricter mode\n      -b, --brace-style             Brace style [collapse|expand|end-expand|expand-strict] [default: \"collapse\"]\n      -k, --keep-array-indentation  Preserve array indentation\n      -a, --indent-case             Indent case inside switch\n      -x, --unescape-strings        Decode printable characters encoded in xNN notation\n\nThese correspond to underscored option keys for both library interfaces:\n\n    defaults = {\n        \"indent_size\": 4,\n        \"indent_char\": \" \",\n        \"indent_level\": 0,\n        \"indent_with_tabs\": false,\n        \"preserve_newlines\": true,\n        \"max_preserve_newlines\": 10,\n        \"jslint_happy\": false,\n        \"brace_style\": \"collapse\",\n        \"keep_array_indentation\": false,\n        \"keep_function_indentation\": false,\n        \"space_before_conditional\": true,\n        \"eval_code\": false,\n        \"indent_case\": false,\n        \"unescape_strings\": false\n    }\n\nYou might notice that the CLI options and defaults hash aren't 100% correlated. Historically, the Python and JS APIs have not been 100% identical. For example, `space_before_conditional` is currently JS-only, and not addressable from the CLI script. There are a few other additional cases keeping us from 100% API-compatibility. Patches welcome!\n\n## License\n\nYou are free to use this in any way you want, in case you find this\nuseful or working for you. (MIT)\n\n## Credits\n\nWritten by Einar Lielmanis, <einar@jsbeautifier.org>\nPython version flourished by Stefano Sanfilippo <a.little.coder@gmail.com>\n\nThanks to Jason Diamond, Patrick Hof, Nochum Sossonko, Andreas Schneider, Dave\nVasilevsky, Vital Batmanov, Ron Baldwin, Gabriel Harrison, Chris J. Shull,\nMathias Bynens, Vittorio Gambaletta and others.\n","_id":"js-beautify@0.2.2","dist":{"shasum":"89cc29ad076450973748334addf1190819dd8943","tarball":"http://registry.npmjs.org/js-beautify/-/js-beautify-0.2.2.tgz"},"maintainers":[{"name":"evocateur","email":"daniel.stockman@gmail.com"}],"deprecated":"major indenting and html bug fixes in 1.4.0."},"0.2.3":{"name":"js-beautify","version":"0.2.3","description":"jsbeautifier.org for node","main":"beautify.js","preferGlobal":true,"bin":{"js-beautify":"./cli.js"},"directories":{"test":"tests"},"scripts":{"test":"./tests/beautify-tests.js"},"repository":{"type":"git","url":"git://github.com/evocateur/js-beautify.git#node-package"},"keywords":["beautify","beautifier","code-quality"],"author":{"name":"Einar Lielmanis","email":"einar@jsbeautifier.org"},"contributors":[{"name":"Vital Batmanov","email":"vital76@gmail.com"},{"name":"Chris J. Shull","email":"chrisjshull@gmail.com"},{"name":"Gian Marco Gherardi","email":"gianmarco.gherardi@gmail.com"},{"name":"Stan","email":"stasson@orc.ru"},{"name":"Vittorio Gambaletta","email":"VittGam@vittgam.net"},{"name":"Daniel Stockman","email":"daniel.stockman@gmail.com"}],"license":"MIT","dependencies":{"optimist":"~0.3.4"},"readme":"# JS Beautifier\n\n...or, more specifically, all of the code powering\n[jsbeautifier.org](http://jsbeautifier.org/).\n\nThis little beautifier will reformat and reindent bookmarklets, ugly\nJavaScript, unpack scripts packed by Dean Edward’s popular packer,\nas well as deobfuscate scripts processed by\n[javascriptobfuscator.com](http://javascriptobfuscator.com/).\n\n## Usage\n\nTo beautify from the command-line you can use the provided Python script/library or [npm](http://npmjs.org/) package.\n\n### Python\n\n`./js-beautify file.js` beautifies a file, output goes to `stdout`.\n\nTo use `jsbeautifier` as a library is simple:\n\n``` python\nimport jsbeautifier\nres = jsbeautifier.beautify('your javascript string')\nres = jsbeautifier.beautify_file('some_file.js')\n```\n\n...or, to specify some options:\n\n``` python\nopts = jsbeautifier.default_options()\nopts.indent_size = 2\nres = jsbeautifier.beautify('some javascript', opts)\n```\n\n### JavaScript\n\nAs an alternative to the Python script, you may install the NPM package `js-beautify`. When installed globally, it provides an executable `js-beautify` script. As with the Python script, the beautified result is sent to `stdout` unless otherwise configured.\n\n```bash\n$ npm -g install js-beautify\n$ js-beautify foo.js\n```\n\nYou can also use `js-beautify` as a `node` library (install locally, the `npm` default):\n\n```bash\n$ npm install js-beautify\n```\n\n```js\nvar beautify = require('js-beautify').js_beautify,\n    fs = require('fs');\n\nfs.readFile('foo.js', 'utf8', function (err, data) {\n    if (err) {\n        throw err;\n    }\n    console.log(beautify(data, { indent_size: 2 }));\n});\n```\n\n### Options\n\nThese are the command-line flags for both Python and JS scripts:\n\n    CLI Options:\n      -f, --file                    Input file(s) (Pass '-' for stdin). These can also be passed directly.\n      -r, --replace                 Write output in-place, replacing input\n      -o, --outfile                 Write output to file (default stdout)\n    \n    Beautifier Options:\n      -s, --indent-size             Indentation size [default: 4]\n      -c, --indent-char             Indentation character [default: \" \"]\n      -l, --indent-level            Initial indentation level [default: 0]\n      -t, --indent-with-tabs        Indent with tabs, overrides -s and -c\n      -p, --preserve-newlines       Preserve existing line-breaks (--no-preserve-newlines disables) [default: true]\n      -m, --max-preserve-newlines   Maximum number of line-breaks to be preserved in one chunk [default: 10]\n      -j, --jslint-happy            Enable jslint-stricter mode\n      -b, --brace-style             Brace style [collapse|expand|end-expand|expand-strict] [default: \"collapse\"]\n      -k, --keep-array-indentation  Preserve array indentation\n      -a, --indent-case             Indent case inside switch\n      -x, --unescape-strings        Decode printable characters encoded in xNN notation\n\nThese correspond to underscored option keys for both library interfaces:\n\n    defaults = {\n        \"indent_size\": 4,\n        \"indent_char\": \" \",\n        \"indent_level\": 0,\n        \"indent_with_tabs\": false,\n        \"preserve_newlines\": true,\n        \"max_preserve_newlines\": 10,\n        \"jslint_happy\": false,\n        \"brace_style\": \"collapse\",\n        \"keep_array_indentation\": false,\n        \"keep_function_indentation\": false,\n        \"space_before_conditional\": true,\n        \"eval_code\": false,\n        \"indent_case\": false,\n        \"unescape_strings\": false\n    }\n\nYou might notice that the CLI options and defaults hash aren't 100% correlated. Historically, the Python and JS APIs have not been 100% identical. For example, `space_before_conditional` is currently JS-only, and not addressable from the CLI script. There are a few other additional cases keeping us from 100% API-compatibility. Patches welcome!\n\n## License\n\nYou are free to use this in any way you want, in case you find this\nuseful or working for you. (MIT)\n\n## Credits\n\nWritten by Einar Lielmanis, <einar@jsbeautifier.org>\nPython version flourished by Stefano Sanfilippo <a.little.coder@gmail.com>\n\nThanks to Jason Diamond, Patrick Hof, Nochum Sossonko, Andreas Schneider, Dave\nVasilevsky, Vital Batmanov, Ron Baldwin, Gabriel Harrison, Chris J. Shull,\nMathias Bynens, Vittorio Gambaletta and others.\n","_id":"js-beautify@0.2.3","dist":{"shasum":"b296f045548979cd070d2a98ab4b4790d0ac29c5","tarball":"http://registry.npmjs.org/js-beautify/-/js-beautify-0.2.3.tgz"},"maintainers":[{"name":"evocateur","email":"daniel.stockman@gmail.com"}],"deprecated":"major indenting and html bug fixes in 1.4.0."},"0.2.4":{"name":"js-beautify","version":"0.2.4","description":"jsbeautifier.org for node","main":"beautify.js","preferGlobal":true,"bin":{"js-beautify":"./cli.js"},"directories":{"test":"tests"},"scripts":{"test":"node ./tests/beautify-tests.js"},"repository":{"type":"git","url":"git://github.com/evocateur/js-beautify.git#node-package"},"keywords":["beautify","beautifier","code-quality"],"author":{"name":"Einar Lielmanis","email":"einar@jsbeautifier.org"},"contributors":[{"name":"Vital Batmanov","email":"vital76@gmail.com"},{"name":"Chris J. Shull","email":"chrisjshull@gmail.com"},{"name":"Gian Marco Gherardi","email":"gianmarco.gherardi@gmail.com"},{"name":"Stan","email":"stasson@orc.ru"},{"name":"Vittorio Gambaletta","email":"VittGam@vittgam.net"},{"name":"Daniel Stockman","email":"daniel.stockman@gmail.com"}],"license":"MIT","dependencies":{"optimist":"~0.3.4"},"readme":"# JS Beautifier\n\n...or, more specifically, all of the code powering\n[jsbeautifier.org](http://jsbeautifier.org/).\n\nThis little beautifier will reformat and reindent bookmarklets, ugly\nJavaScript, unpack scripts packed by Dean Edward’s popular packer,\nas well as deobfuscate scripts processed by\n[javascriptobfuscator.com](http://javascriptobfuscator.com/).\n\n## Usage\n\nTo beautify from the command-line you can use the provided Python script/library or [npm](http://npmjs.org/) package.\n\n### Python\n\n`./js-beautify file.js` beautifies a file, output goes to `stdout`.\n\nTo use `jsbeautifier` as a library is simple:\n\n``` python\nimport jsbeautifier\nres = jsbeautifier.beautify('your javascript string')\nres = jsbeautifier.beautify_file('some_file.js')\n```\n\n...or, to specify some options:\n\n``` python\nopts = jsbeautifier.default_options()\nopts.indent_size = 2\nres = jsbeautifier.beautify('some javascript', opts)\n```\n\n### JavaScript\n\nAs an alternative to the Python script, you may install the NPM package `js-beautify`. When installed globally, it provides an executable `js-beautify` script. As with the Python script, the beautified result is sent to `stdout` unless otherwise configured.\n\n```bash\n$ npm -g install js-beautify\n$ js-beautify foo.js\n```\n\nYou can also use `js-beautify` as a `node` library (install locally, the `npm` default):\n\n```bash\n$ npm install js-beautify\n```\n\n```js\nvar beautify = require('js-beautify').js_beautify,\n    fs = require('fs');\n\nfs.readFile('foo.js', 'utf8', function (err, data) {\n    if (err) {\n        throw err;\n    }\n    console.log(beautify(data, { indent_size: 2 }));\n});\n```\n\n### Options\n\nThese are the command-line flags for both Python and JS scripts:\n\n    CLI Options:\n      -f, --file                    Input file(s) (Pass '-' for stdin). These can also be passed directly.\n      -r, --replace                 Write output in-place, replacing input\n      -o, --outfile                 Write output to file (default stdout)\n    \n    Beautifier Options:\n      -s, --indent-size             Indentation size [default: 4]\n      -c, --indent-char             Indentation character [default: \" \"]\n      -l, --indent-level            Initial indentation level [default: 0]\n      -t, --indent-with-tabs        Indent with tabs, overrides -s and -c\n      -p, --preserve-newlines       Preserve existing line-breaks (--no-preserve-newlines disables) [default: true]\n      -m, --max-preserve-newlines   Maximum number of line-breaks to be preserved in one chunk [default: 10]\n      -j, --jslint-happy            Enable jslint-stricter mode\n      -b, --brace-style             Brace style [collapse|expand|end-expand|expand-strict] [default: \"collapse\"]\n      -B, --break-chained-methods   Break chained method calls across subsequent lines\n      -k, --keep-array-indentation  Preserve array indentation\n      -x, --unescape-strings        Decode printable characters encoded in xNN notation\n\nThese correspond to underscored option keys for both library interfaces:\n\n    defaults = {\n        \"indent_size\": 4,\n        \"indent_char\": \" \",\n        \"indent_level\": 0,\n        \"indent_with_tabs\": false,\n        \"preserve_newlines\": true,\n        \"max_preserve_newlines\": 10,\n        \"jslint_happy\": false,\n        \"brace_style\": \"collapse\",\n        \"keep_array_indentation\": false,\n        \"keep_function_indentation\": false,\n        \"space_before_conditional\": true,\n        \"break_chained_methods\": false,\n        \"eval_code\": false,\n        \"unescape_strings\": false\n    }\n\nYou might notice that the CLI options and defaults hash aren't 100% correlated. Historically, the Python and JS APIs have not been 100% identical. For example, `space_before_conditional` is currently JS-only, and not addressable from the CLI script. There are a few other additional cases keeping us from 100% API-compatibility. Patches welcome!\n\n## License\n\nYou are free to use this in any way you want, in case you find this\nuseful or working for you. (MIT)\n\n## Credits\n\nWritten by Einar Lielmanis, <einar@jsbeautifier.org>\nPython version flourished by Stefano Sanfilippo <a.little.coder@gmail.com>\n\nThanks to Jason Diamond, Patrick Hof, Nochum Sossonko, Andreas Schneider, Dave\nVasilevsky, Vital Batmanov, Ron Baldwin, Gabriel Harrison, Chris J. Shull,\nMathias Bynens, Vittorio Gambaletta and others.\n","readmeFilename":"README.md","_id":"js-beautify@0.2.4","dist":{"shasum":"262150b7b2608acfc255a80efa6acdc36b916019","tarball":"http://registry.npmjs.org/js-beautify/-/js-beautify-0.2.4.tgz"},"_npmVersion":"1.1.65","_npmUser":{"name":"evocateur","email":"daniel.stockman@gmail.com"},"maintainers":[{"name":"evocateur","email":"daniel.stockman@gmail.com"}],"deprecated":"major indenting and html bug fixes in 1.4.0."},"0.3.0":{"name":"js-beautify","version":"0.3.0","description":"jsbeautifier.org for node","main":"beautify.js","preferGlobal":true,"bin":{"js-beautify":"./cli.js"},"directories":{"test":"tests"},"scripts":{"test":"node ./tests/beautify-tests.js"},"repository":{"type":"git","url":"git://github.com/evocateur/js-beautify.git#node-package"},"keywords":["beautify","beautifier","code-quality"],"author":{"name":"Einar Lielmanis","email":"einar@jsbeautifier.org"},"contributors":[{"name":"Vital Batmanov","email":"vital76@gmail.com"},{"name":"Chris J. Shull","email":"chrisjshull@gmail.com"},{"name":"Gian Marco Gherardi","email":"gianmarco.gherardi@gmail.com"},{"name":"Stan","email":"stasson@orc.ru"},{"name":"Vittorio Gambaletta","email":"VittGam@vittgam.net"},{"name":"Daniel Stockman","email":"daniel.stockman@gmail.com"}],"license":"MIT","dependencies":{"config-chain":"~1.1.3","nopt":"2.x"},"readme":"# JS Beautifier\n\n...or, more specifically, all of the code powering\n[jsbeautifier.org](http://jsbeautifier.org/).\n\nThis little beautifier will reformat and reindent bookmarklets, ugly\nJavaScript, unpack scripts packed by Dean Edward’s popular packer,\nas well as deobfuscate scripts processed by\n[javascriptobfuscator.com](http://javascriptobfuscator.com/).\n\n## Usage\n\nTo beautify from the command-line you can use the provided Python script/library or [npm](http://npmjs.org/) package.\n\n### Python\n\n`./js-beautify file.js` beautifies a file, output goes to `stdout`.\n\nTo use `jsbeautifier` as a library is simple:\n\n``` python\nimport jsbeautifier\nres = jsbeautifier.beautify('your javascript string')\nres = jsbeautifier.beautify_file('some_file.js')\n```\n\n...or, to specify some options:\n\n``` python\nopts = jsbeautifier.default_options()\nopts.indent_size = 2\nres = jsbeautifier.beautify('some javascript', opts)\n```\n\n### JavaScript\n\nAs an alternative to the Python script, you may install the NPM package `js-beautify`. When installed globally, it provides an executable `js-beautify` script. As with the Python script, the beautified result is sent to `stdout` unless otherwise configured.\n\n```bash\n$ npm -g install js-beautify\n$ js-beautify foo.js\n```\n\nYou can also use `js-beautify` as a `node` library (install locally, the `npm` default):\n\n```bash\n$ npm install js-beautify\n```\n\n```js\nvar beautify = require('js-beautify').js_beautify,\n    fs = require('fs');\n\nfs.readFile('foo.js', 'utf8', function (err, data) {\n    if (err) {\n        throw err;\n    }\n    console.log(beautify(data, { indent_size: 2 }));\n});\n```\n\n### Options\n\nThese are the command-line flags for both Python and JS scripts:\n\n```txt\nCLI Options:\n  -f, --file                    Input file(s) (Pass '-' for stdin). These can also be passed directly.\n  -r, --replace                 Write output in-place, replacing input\n  -o, --outfile                 Write output to file (default stdout)\n  --config                      Path to config file\n  -v, --version                 Show the version\n  -h, --help                    Show this help\n\nBeautifier Options:\n  -s, --indent-size             Indentation size [4]\n  -c, --indent-char             Indentation character [\" \"]\n  -l, --indent-level            Initial indentation level [0]\n  -t, --indent-with-tabs        Indent with tabs, overrides -s and -c\n  -p, --preserve-newlines       Preserve existing line-breaks (--no-preserve-newlines disables)\n  -m, --max-preserve-newlines   Maximum number of line-breaks to be preserved in one chunk [10]\n  -j, --jslint-happy            Enable jslint-stricter mode\n  -b, --brace-style             [collapse|expand|end-expand|expand-strict] [\"collapse\"]\n  -B, --break-chained-methods   Break chained method calls across subsequent lines\n  -k, --keep-array-indentation  Preserve array indentation\n  -x, --unescape-strings        Decode printable characters encoded in xNN notation\n  -g, --good-stuff              Warm the cockles of Crockford's heart\n```\n\nThese largely correspond to the underscored option keys for both library interfaces, which have these defaults:\n\n```json\n{\n    \"indent_size\": 4,\n    \"indent_char\": \" \",\n    \"indent_level\": 0,\n    \"indent_with_tabs\": false,\n    \"preserve_newlines\": true,\n    \"max_preserve_newlines\": 10,\n    \"jslint_happy\": false,\n    \"brace_style\": \"collapse\",\n    \"keep_array_indentation\": false,\n    \"keep_function_indentation\": false,\n    \"space_before_conditional\": true,\n    \"break_chained_methods\": false,\n    \"eval_code\": false,\n    \"unescape_strings\": false\n}\n```\n\nIn addition to CLI arguments, you may pass config to the JS executable via:\n\n * any `jsbeautify_`-prefixed environment variables\n * a `JSON`-formatted file indicated by the `--config` parameter\n * a `.jsbeautifyrc` file containing `JSON` data at any level of the filesystem above `$PWD`\n\nConfiguration sources provided earlier in this stack will override later ones.\n\nYou might notice that the CLI options and defaults hash aren't 100% correlated. Historically, the Python and JS APIs have not been 100% identical. For example, `space_before_conditional` is currently JS-only, and not addressable from the CLI script. There are a few other additional cases keeping us from 100% API-compatibility. Patches welcome!\n\n## License\n\nYou are free to use this in any way you want, in case you find this\nuseful or working for you. (MIT)\n\n## Credits\n\nWritten by Einar Lielmanis, <einar@jsbeautifier.org>\nPython version flourished by Stefano Sanfilippo <a.little.coder@gmail.com>\n\nThanks to Jason Diamond, Patrick Hof, Nochum Sossonko, Andreas Schneider, Dave\nVasilevsky, Vital Batmanov, Ron Baldwin, Gabriel Harrison, Chris J. Shull,\nMathias Bynens, Vittorio Gambaletta and others.\n","readmeFilename":"README.md","_id":"js-beautify@0.3.0","dist":{"shasum":"bb5106a591b416f53a8888f996c89883fb0002c4","tarball":"http://registry.npmjs.org/js-beautify/-/js-beautify-0.3.0.tgz"},"_npmVersion":"1.1.65","_npmUser":{"name":"evocateur","email":"daniel.stockman@gmail.com"},"maintainers":[{"name":"evocateur","email":"daniel.stockman@gmail.com"}],"deprecated":"major indenting and html bug fixes in 1.4.0."},"0.3.1":{"name":"js-beautify","version":"0.3.1","description":"jsbeautifier.org for node","main":"beautify.js","preferGlobal":true,"bin":{"js-beautify":"./cli.js"},"directories":{"test":"tests"},"scripts":{"test":"node ./tests/beautify-tests.js"},"repository":{"type":"git","url":"git://github.com/evocateur/js-beautify.git#node-package"},"keywords":["beautify","beautifier","code-quality"],"author":{"name":"Einar Lielmanis","email":"einar@jsbeautifier.org"},"contributors":[{"name":"Vital Batmanov","email":"vital76@gmail.com"},{"name":"Chris J. Shull","email":"chrisjshull@gmail.com"},{"name":"Gian Marco Gherardi","email":"gianmarco.gherardi@gmail.com"},{"name":"Stan","email":"stasson@orc.ru"},{"name":"Vittorio Gambaletta","email":"VittGam@vittgam.net"},{"name":"Daniel Stockman","email":"daniel.stockman@gmail.com"}],"license":"MIT","dependencies":{"config-chain":"~1.1.3","nopt":"2.x"},"readme":"# JS Beautifier\n\n...or, more specifically, all of the code powering\n[jsbeautifier.org](http://jsbeautifier.org/).\n\nThis little beautifier will reformat and reindent bookmarklets, ugly\nJavaScript, unpack scripts packed by Dean Edward’s popular packer,\nas well as deobfuscate scripts processed by\n[javascriptobfuscator.com](http://javascriptobfuscator.com/).\n\n## Usage\n\nTo beautify from the command-line you can use the provided Python script/library or [npm](http://npmjs.org/) package.\n\n### Python\n\n`./js-beautify file.js` beautifies a file, output goes to `stdout`.\n\nTo use `jsbeautifier` as a library is simple:\n\n``` python\nimport jsbeautifier\nres = jsbeautifier.beautify('your javascript string')\nres = jsbeautifier.beautify_file('some_file.js')\n```\n\n...or, to specify some options:\n\n``` python\nopts = jsbeautifier.default_options()\nopts.indent_size = 2\nres = jsbeautifier.beautify('some javascript', opts)\n```\n\n### JavaScript\n\nAs an alternative to the Python script, you may install the NPM package `js-beautify`. When installed globally, it provides an executable `js-beautify` script. As with the Python script, the beautified result is sent to `stdout` unless otherwise configured.\n\n```bash\n$ npm -g install js-beautify\n$ js-beautify foo.js\n```\n\nYou can also use `js-beautify` as a `node` library (install locally, the `npm` default):\n\n```bash\n$ npm install js-beautify\n```\n\n```js\nvar beautify = require('js-beautify').js_beautify,\n    fs = require('fs');\n\nfs.readFile('foo.js', 'utf8', function (err, data) {\n    if (err) {\n        throw err;\n    }\n    console.log(beautify(data, { indent_size: 2 }));\n});\n```\n\n### Options\n\nThese are the command-line flags for both Python and JS scripts:\n\n```text\nCLI Options:\n  -f, --file                    Input file(s) (Pass '-' for stdin). These can also be passed directly.\n  -r, --replace                 Write output in-place, replacing input\n  -o, --outfile                 Write output to file (default stdout)\n  --config                      Path to config file\n  -v, --version                 Show the version\n  -h, --help                    Show this help\n\nBeautifier Options:\n  -s, --indent-size             Indentation size [4]\n  -c, --indent-char             Indentation character [\" \"]\n  -l, --indent-level            Initial indentation level [0]\n  -t, --indent-with-tabs        Indent with tabs, overrides -s and -c\n  -p, --preserve-newlines       Preserve existing line-breaks (--no-preserve-newlines disables)\n  -m, --max-preserve-newlines   Maximum number of line-breaks to be preserved in one chunk [10]\n  -j, --jslint-happy            Enable jslint-stricter mode\n  -b, --brace-style             [collapse|expand|end-expand|expand-strict] [\"collapse\"]\n  -B, --break-chained-methods   Break chained method calls across subsequent lines\n  -k, --keep-array-indentation  Preserve array indentation\n  -x, --unescape-strings        Decode printable characters encoded in xNN notation\n  -g, --good-stuff              Warm the cockles of Crockford's heart\n```\n\nThese largely correspond to the underscored option keys for both library interfaces, which have these defaults:\n\n```json\n{\n    \"indent_size\": 4,\n    \"indent_char\": \" \",\n    \"indent_level\": 0,\n    \"indent_with_tabs\": false,\n    \"preserve_newlines\": true,\n    \"max_preserve_newlines\": 10,\n    \"jslint_happy\": false,\n    \"brace_style\": \"collapse\",\n    \"keep_array_indentation\": false,\n    \"keep_function_indentation\": false,\n    \"space_before_conditional\": true,\n    \"break_chained_methods\": false,\n    \"eval_code\": false,\n    \"unescape_strings\": false\n}\n```\n\nIn addition to CLI arguments, you may pass config to the JS executable via:\n\n * any `jsbeautify_`-prefixed environment variables\n * a `JSON`-formatted file indicated by the `--config` parameter\n * a `.jsbeautifyrc` file containing `JSON` data at any level of the filesystem above `$PWD`\n\nConfiguration sources provided earlier in this stack will override later ones.\n\nYou might notice that the CLI options and defaults hash aren't 100% correlated. Historically, the Python and JS APIs have not been 100% identical. For example, `space_before_conditional` is currently JS-only, and not addressable from the CLI script. There are a few other additional cases keeping us from 100% API-compatibility. Patches welcome!\n\n## License\n\nYou are free to use this in any way you want, in case you find this\nuseful or working for you. (MIT)\n\n## Credits\n\nWritten by Einar Lielmanis, <einar@jsbeautifier.org>\nPython version flourished by Stefano Sanfilippo <a.little.coder@gmail.com>\n\nThanks to Jason Diamond, Patrick Hof, Nochum Sossonko, Andreas Schneider, Dave\nVasilevsky, Vital Batmanov, Ron Baldwin, Gabriel Harrison, Chris J. Shull,\nMathias Bynens, Vittorio Gambaletta and others.\n","readmeFilename":"README.md","_id":"js-beautify@0.3.1","dist":{"shasum":"b0deb1979a74541779cc5dbe4dba2fa7ff3b2295","tarball":"http://registry.npmjs.org/js-beautify/-/js-beautify-0.3.1.tgz"},"_npmVersion":"1.1.65","_npmUser":{"name":"evocateur","email":"daniel.stockman@gmail.com"},"maintainers":[{"name":"evocateur","email":"daniel.stockman@gmail.com"}],"deprecated":"major indenting and html bug fixes in 1.4.0."},"0.3.2":{"name":"js-beautify","version":"0.3.2","description":"jsbeautifier.org for node","main":"beautify.js","preferGlobal":true,"bin":{"js-beautify":"./cli.js"},"directories":{"test":"tests"},"scripts":{"test":"node ./tests/beautify-tests.js"},"repository":{"type":"git","url":"git://github.com/evocateur/js-beautify.git#node-package"},"keywords":["beautify","beautifier","code-quality"],"author":{"name":"Einar Lielmanis","email":"einar@jsbeautifier.org"},"contributors":[{"name":"Vital Batmanov","email":"vital76@gmail.com"},{"name":"Chris J. Shull","email":"chrisjshull@gmail.com"},{"name":"Gian Marco Gherardi","email":"gianmarco.gherardi@gmail.com"},{"name":"Stan","email":"stasson@orc.ru"},{"name":"Vittorio Gambaletta","email":"VittGam@vittgam.net"},{"name":"Daniel Stockman","email":"daniel.stockman@gmail.com"}],"license":"MIT","dependencies":{"config-chain":"~1.1.3","nopt":"2.x"},"readme":"# JS Beautifier\n\n...or, more specifically, all of the code powering\n[jsbeautifier.org](http://jsbeautifier.org/).\n\nThis little beautifier will reformat and reindent bookmarklets, ugly\nJavaScript, unpack scripts packed by Dean Edward’s popular packer,\nas well as deobfuscate scripts processed by\n[javascriptobfuscator.com](http://javascriptobfuscator.com/).\n\n## Usage\n\nTo beautify from the command-line you can use the provided Python script/library or [npm](http://npmjs.org/) package.\n\n### Python\n\n`./js-beautify file.js` beautifies a file, output goes to `stdout`.\n\nTo use `jsbeautifier` as a library is simple:\n\n``` python\nimport jsbeautifier\nres = jsbeautifier.beautify('your javascript string')\nres = jsbeautifier.beautify_file('some_file.js')\n```\n\n...or, to specify some options:\n\n``` python\nopts = jsbeautifier.default_options()\nopts.indent_size = 2\nres = jsbeautifier.beautify('some javascript', opts)\n```\n\n### JavaScript\n\nAs an alternative to the Python script, you may install the NPM package `js-beautify`. When installed globally, it provides an executable `js-beautify` script. As with the Python script, the beautified result is sent to `stdout` unless otherwise configured.\n\n```bash\n$ npm -g install js-beautify\n$ js-beautify foo.js\n```\n\nYou can also use `js-beautify` as a `node` library (install locally, the `npm` default):\n\n```bash\n$ npm install js-beautify\n```\n\n```js\nvar beautify = require('js-beautify').js_beautify,\n    fs = require('fs');\n\nfs.readFile('foo.js', 'utf8', function (err, data) {\n    if (err) {\n        throw err;\n    }\n    console.log(beautify(data, { indent_size: 2 }));\n});\n```\n\n### Options\n\nThese are the command-line flags for both Python and JS scripts:\n\n```text\nCLI Options:\n  -f, --file                    Input file(s) (Pass '-' for stdin). These can also be passed directly.\n  -r, --replace                 Write output in-place, replacing input\n  -o, --outfile                 Write output to file (default stdout)\n  --config                      Path to config file\n  -v, --version                 Show the version\n  -h, --help                    Show this help\n\nBeautifier Options:\n  -s, --indent-size             Indentation size [4]\n  -c, --indent-char             Indentation character [\" \"]\n  -l, --indent-level            Initial indentation level [0]\n  -t, --indent-with-tabs        Indent with tabs, overrides -s and -c\n  -p, --preserve-newlines       Preserve existing line-breaks (--no-preserve-newlines disables)\n  -m, --max-preserve-newlines   Maximum number of line-breaks to be preserved in one chunk [10]\n  -j, --jslint-happy            Enable jslint-stricter mode\n  -b, --brace-style             [collapse|expand|end-expand|expand-strict] [\"collapse\"]\n  -B, --break-chained-methods   Break chained method calls across subsequent lines\n  -k, --keep-array-indentation  Preserve array indentation\n  -x, --unescape-strings        Decode printable characters encoded in xNN notation\n  -g, --good-stuff              Warm the cockles of Crockford's heart\n```\n\nThese largely correspond to the underscored option keys for both library interfaces, which have these defaults:\n\n```json\n{\n    \"indent_size\": 4,\n    \"indent_char\": \" \",\n    \"indent_level\": 0,\n    \"indent_with_tabs\": false,\n    \"preserve_newlines\": true,\n    \"max_preserve_newlines\": 10,\n    \"jslint_happy\": false,\n    \"brace_style\": \"collapse\",\n    \"keep_array_indentation\": false,\n    \"keep_function_indentation\": false,\n    \"space_before_conditional\": true,\n    \"break_chained_methods\": false,\n    \"eval_code\": false,\n    \"unescape_strings\": false\n}\n```\n\nIn addition to CLI arguments, you may pass config to the JS executable via:\n\n * any `jsbeautify_`-prefixed environment variables\n * a `JSON`-formatted file indicated by the `--config` parameter\n * a `.jsbeautifyrc` file containing `JSON` data at any level of the filesystem above `$PWD`\n\nConfiguration sources provided earlier in this stack will override later ones.\n\nYou might notice that the CLI options and defaults hash aren't 100% correlated. Historically, the Python and JS APIs have not been 100% identical. For example, `space_before_conditional` is currently JS-only, and not addressable from the CLI script. There are a few other additional cases keeping us from 100% API-compatibility. Patches welcome!\n\n## License\n\nYou are free to use this in any way you want, in case you find this\nuseful or working for you. (MIT)\n\n## Credits\n\nWritten by Einar Lielmanis, <einar@jsbeautifier.org>\nPython version flourished by Stefano Sanfilippo <a.little.coder@gmail.com>\n\nThanks to Jason Diamond, Patrick Hof, Nochum Sossonko, Andreas Schneider, Dave\nVasilevsky, Vital Batmanov, Ron Baldwin, Gabriel Harrison, Chris J. Shull,\nMathias Bynens, Vittorio Gambaletta and others.\n","readmeFilename":"README.md","_id":"js-beautify@0.3.2","dist":{"shasum":"8573a30ba9c25daf33df37ac24726705d09506d4","tarball":"http://registry.npmjs.org/js-beautify/-/js-beautify-0.3.2.tgz"},"_npmVersion":"1.1.69","_npmUser":{"name":"evocateur","email":"daniel.stockman@gmail.com"},"maintainers":[{"name":"evocateur","email":"daniel.stockman@gmail.com"}],"deprecated":"major indenting and html bug fixes in 1.4.0."},"0.3.3":{"name":"js-beautify","version":"0.3.3","description":"jsbeautifier.org for node","main":"beautify.js","preferGlobal":true,"bin":{"js-beautify":"./cli.js"},"directories":{"test":"tests"},"scripts":{"test":"node ./tests/beautify-tests.js"},"repository":{"type":"git","url":"git://github.com/evocateur/js-beautify.git#node-package"},"keywords":["beautify","beautifier","code-quality"],"author":{"name":"Einar Lielmanis","email":"einar@jsbeautifier.org"},"contributors":[{"name":"Vital Batmanov","email":"vital76@gmail.com"},{"name":"Chris J. Shull","email":"chrisjshull@gmail.com"},{"name":"Gian Marco Gherardi","email":"gianmarco.gherardi@gmail.com"},{"name":"Stan","email":"stasson@orc.ru"},{"name":"Vittorio Gambaletta","email":"VittGam@vittgam.net"},{"name":"Daniel Stockman","email":"daniel.stockman@gmail.com"}],"license":"MIT","dependencies":{"config-chain":"~1.1.3","nopt":"2.x"},"readme":"# JS Beautifier\n\n...or, more specifically, all of the code powering\n[jsbeautifier.org](http://jsbeautifier.org/).\n\nThis little beautifier will reformat and reindent bookmarklets, ugly\nJavaScript, unpack scripts packed by Dean Edward’s popular packer,\nas well as deobfuscate scripts processed by\n[javascriptobfuscator.com](http://javascriptobfuscator.com/).\n\n## Usage\n\nTo beautify from the command-line you can use the provided Python script/library or [npm](http://npmjs.org/) package.\n\n### Python\n\n`./js-beautify file.js` beautifies a file, output goes to `stdout`.\n\nTo use `jsbeautifier` as a library is simple:\n\n``` python\nimport jsbeautifier\nres = jsbeautifier.beautify('your javascript string')\nres = jsbeautifier.beautify_file('some_file.js')\n```\n\n...or, to specify some options:\n\n``` python\nopts = jsbeautifier.default_options()\nopts.indent_size = 2\nres = jsbeautifier.beautify('some javascript', opts)\n```\n\n### JavaScript\n\nAs an alternative to the Python script, you may install the NPM package `js-beautify`. When installed globally, it provides an executable `js-beautify` script. As with the Python script, the beautified result is sent to `stdout` unless otherwise configured.\n\n```bash\n$ npm -g install js-beautify\n$ js-beautify foo.js\n```\n\nYou can also use `js-beautify` as a `node` library (install locally, the `npm` default):\n\n```bash\n$ npm install js-beautify\n```\n\n```js\nvar beautify = require('js-beautify').js_beautify,\n    fs = require('fs');\n\nfs.readFile('foo.js', 'utf8', function (err, data) {\n    if (err) {\n        throw err;\n    }\n    console.log(beautify(data, { indent_size: 2 }));\n});\n```\n\n### Options\n\nThese are the command-line flags for both Python and JS scripts:\n\n```text\nCLI Options:\n  -f, --file                    Input file(s) (Pass '-' for stdin). These can also be passed directly.\n  -r, --replace                 Write output in-place, replacing input\n  -o, --outfile                 Write output to file (default stdout)\n  --config                      Path to config file\n  -v, --version                 Show the version\n  -h, --help                    Show this help\n\nBeautifier Options:\n  -s, --indent-size             Indentation size [4]\n  -c, --indent-char             Indentation character [\" \"]\n  -l, --indent-level            Initial indentation level [0]\n  -t, --indent-with-tabs        Indent with tabs, overrides -s and -c\n  -p, --preserve-newlines       Preserve existing line-breaks (--no-preserve-newlines disables)\n  -m, --max-preserve-newlines   Maximum number of line-breaks to be preserved in one chunk [10]\n  -j, --jslint-happy            Enable jslint-stricter mode\n  -b, --brace-style             [collapse|expand|end-expand|expand-strict] [\"collapse\"]\n  -B, --break-chained-methods   Break chained method calls across subsequent lines\n  -k, --keep-array-indentation  Preserve array indentation\n  -x, --unescape-strings        Decode printable characters encoded in xNN notation\n  -g, --good-stuff              Warm the cockles of Crockford's heart\n```\n\nThese largely correspond to the underscored option keys for both library interfaces, which have these defaults:\n\n```json\n{\n    \"indent_size\": 4,\n    \"indent_char\": \" \",\n    \"indent_level\": 0,\n    \"indent_with_tabs\": false,\n    \"preserve_newlines\": true,\n    \"max_preserve_newlines\": 10,\n    \"jslint_happy\": false,\n    \"brace_style\": \"collapse\",\n    \"keep_array_indentation\": false,\n    \"keep_function_indentation\": false,\n    \"space_before_conditional\": true,\n    \"break_chained_methods\": false,\n    \"eval_code\": false,\n    \"unescape_strings\": false\n}\n```\n\nIn addition to CLI arguments, you may pass config to the JS executable via:\n\n * any `jsbeautify_`-prefixed environment variables\n * a `JSON`-formatted file indicated by the `--config` parameter\n * a `.jsbeautifyrc` file containing `JSON` data at any level of the filesystem above `$PWD`\n\nConfiguration sources provided earlier in this stack will override later ones.\n\nYou might notice that the CLI options and defaults hash aren't 100% correlated. Historically, the Python and JS APIs have not been 100% identical. For example, `space_before_conditional` is currently JS-only, and not addressable from the CLI script. There are a few other additional cases keeping us from 100% API-compatibility. Patches welcome!\n\n## License\n\nYou are free to use this in any way you want, in case you find this\nuseful or working for you. (MIT)\n\n## Credits\n\nWritten by Einar Lielmanis, <einar@jsbeautifier.org>\nPython version flourished by Stefano Sanfilippo <a.little.coder@gmail.com>\n\nThanks to Jason Diamond, Patrick Hof, Nochum Sossonko, Andreas Schneider, Dave\nVasilevsky, Vital Batmanov, Ron Baldwin, Gabriel Harrison, Chris J. Shull,\nMathias Bynens, Vittorio Gambaletta and others.\n","readmeFilename":"README.md","_id":"js-beautify@0.3.3","dist":{"shasum":"8cf5a2e6b6fa55908f96739345c33ec4fc570071","tarball":"http://registry.npmjs.org/js-beautify/-/js-beautify-0.3.3.tgz"},"_from":".","_npmVersion":"1.2.11","_npmUser":{"name":"evocateur","email":"daniel.stockman@gmail.com"},"maintainers":[{"name":"evocateur","email":"daniel.stockman@gmail.com"}],"deprecated":"major indenting and html bug fixes in 1.4.0."},"0.3.4":{"name":"js-beautify","version":"0.3.4","description":"jsbeautifier.org for node","main":"beautify.js","preferGlobal":true,"bin":{"js-beautify":"./cli.js"},"directories":{"test":"tests"},"scripts":{"test":"node ./tests/beautify-tests.js"},"repository":{"type":"git","url":"git://github.com/evocateur/js-beautify.git#node-package"},"keywords":["beautify","beautifier","code-quality"],"author":{"name":"Einar Lielmanis","email":"einar@jsbeautifier.org"},"contributors":[{"name":"Vital Batmanov","email":"vital76@gmail.com"},{"name":"Chris J. Shull","email":"chrisjshull@gmail.com"},{"name":"Gian Marco Gherardi","email":"gianmarco.gherardi@gmail.com"},{"name":"Stan","email":"stasson@orc.ru"},{"name":"Vittorio Gambaletta","email":"VittGam@vittgam.net"},{"name":"Daniel Stockman","email":"daniel.stockman@gmail.com"}],"license":"MIT","dependencies":{"config-chain":"~1.1.5","nopt":"~2.1.1"},"readme":"# JS Beautifier\n\n...or, more specifically, all of the code powering\n[jsbeautifier.org](http://jsbeautifier.org/).\n\nThis little beautifier will reformat and reindent bookmarklets, ugly\nJavaScript, unpack scripts packed by Dean Edward’s popular packer,\nas well as deobfuscate scripts processed by\n[javascriptobfuscator.com](http://javascriptobfuscator.com/).\n\n## Usage\n\nTo beautify from the command-line you can use the provided Python script/library or [npm](http://npmjs.org/) package.\n\n### Python\n\n`./js-beautify file.js` beautifies a file, output goes to `stdout`.\n\nTo use `jsbeautifier` as a library is simple:\n\n``` python\nimport jsbeautifier\nres = jsbeautifier.beautify('your javascript string')\nres = jsbeautifier.beautify_file('some_file.js')\n```\n\n...or, to specify some options:\n\n``` python\nopts = jsbeautifier.default_options()\nopts.indent_size = 2\nres = jsbeautifier.beautify('some javascript', opts)\n```\n\n### JavaScript\n\nAs an alternative to the Python script, you may install the NPM package `js-beautify`. When installed globally, it provides an executable `js-beautify` script. As with the Python script, the beautified result is sent to `stdout` unless otherwise configured.\n\n```bash\n$ npm -g install js-beautify\n$ js-beautify foo.js\n```\n\nYou can also use `js-beautify` as a `node` library (install locally, the `npm` default):\n\n```bash\n$ npm install js-beautify\n```\n\n```js\nvar beautify = require('js-beautify').js_beautify,\n    fs = require('fs');\n\nfs.readFile('foo.js', 'utf8', function (err, data) {\n    if (err) {\n        throw err;\n    }\n    console.log(beautify(data, { indent_size: 2 }));\n});\n```\n\n### Options\n\nThese are the command-line flags for both Python and JS scripts:\n\n```text\nCLI Options:\n  -f, --file                    Input file(s) (Pass '-' for stdin). These can also be passed directly.\n  -r, --replace                 Write output in-place, replacing input\n  -o, --outfile                 Write output to file (default stdout)\n  --config                      Path to config file\n  -v, --version                 Show the version\n  -h, --help                    Show this help\n\nBeautifier Options:\n  -s, --indent-size             Indentation size [4]\n  -c, --indent-char             Indentation character [\" \"]\n  -l, --indent-level            Initial indentation level [0]\n  -t, --indent-with-tabs        Indent with tabs, overrides -s and -c\n  -p, --preserve-newlines       Preserve existing line-breaks (--no-preserve-newlines disables)\n  -m, --max-preserve-newlines   Maximum number of line-breaks to be preserved in one chunk [10]\n  -j, --jslint-happy            Enable jslint-stricter mode\n  -b, --brace-style             [collapse|expand|end-expand|expand-strict] [\"collapse\"]\n  -B, --break-chained-methods   Break chained method calls across subsequent lines\n  -k, --keep-array-indentation  Preserve array indentation\n  -x, --unescape-strings        Decode printable characters encoded in xNN notation\n  -g, --good-stuff              Warm the cockles of Crockford's heart\n```\n\nThese largely correspond to the underscored option keys for both library interfaces, which have these defaults:\n\n```json\n{\n    \"indent_size\": 4,\n    \"indent_char\": \" \",\n    \"indent_level\": 0,\n    \"indent_with_tabs\": false,\n    \"preserve_newlines\": true,\n    \"max_preserve_newlines\": 10,\n    \"jslint_happy\": false,\n    \"brace_style\": \"collapse\",\n    \"keep_array_indentation\": false,\n    \"keep_function_indentation\": false,\n    \"space_before_conditional\": true,\n    \"break_chained_methods\": false,\n    \"eval_code\": false,\n    \"unescape_strings\": false\n}\n```\n\nIn addition to CLI arguments, you may pass config to the JS executable via:\n\n * any `jsbeautify_`-prefixed environment variables\n * a `JSON`-formatted file indicated by the `--config` parameter\n * a `.jsbeautifyrc` file containing `JSON` data at any level of the filesystem above `$PWD`\n\nConfiguration sources provided earlier in this stack will override later ones.\n\nYou might notice that the CLI options and defaults hash aren't 100% correlated. Historically, the Python and JS APIs have not been 100% identical. For example, `space_before_conditional` is currently JS-only, and not addressable from the CLI script. There are a few other additional cases keeping us from 100% API-compatibility. Patches welcome!\n\n## License\n\nYou are free to use this in any way you want, in case you find this\nuseful or working for you. (MIT)\n\n## Credits\n\nWritten by Einar Lielmanis, <einar@jsbeautifier.org>\nPython version flourished by Stefano Sanfilippo <a.little.coder@gmail.com>\n\nThanks to Jason Diamond, Patrick Hof, Nochum Sossonko, Andreas Schneider, Dave\nVasilevsky, Vital Batmanov, Ron Baldwin, Gabriel Harrison, Chris J. Shull,\nMathias Bynens, Vittorio Gambaletta and others.\n","readmeFilename":"README.md","_id":"js-beautify@0.3.4","dist":{"shasum":"6efc947dc0ea4e6bac059f344b6a89188811ea94","tarball":"http://registry.npmjs.org/js-beautify/-/js-beautify-0.3.4.tgz"},"_from":".","_npmVersion":"1.2.11","_npmUser":{"name":"evocateur","email":"daniel.stockman@gmail.com"},"maintainers":[{"name":"evocateur","email":"daniel.stockman@gmail.com"}],"deprecated":"major indenting and html bug fixes in 1.4.0."},"0.3.5":{"name":"js-beautify","version":"0.3.5","description":"jsbeautifier.org for node","main":"beautify.js","preferGlobal":true,"bin":{"js-beautify":"./cli.js"},"directories":{"test":"tests"},"scripts":{"test":"node ./tests/beautify-tests.js"},"repository":{"type":"git","url":"git://github.com/evocateur/js-beautify.git#node-package"},"keywords":["beautify","beautifier","code-quality"],"author":{"name":"Einar Lielmanis","email":"einar@jsbeautifier.org"},"contributors":[{"name":"Vital Batmanov","email":"vital76@gmail.com"},{"name":"Chris J. Shull","email":"chrisjshull@gmail.com"},{"name":"Gian Marco Gherardi","email":"gianmarco.gherardi@gmail.com"},{"name":"Stan","email":"stasson@orc.ru"},{"name":"Vittorio Gambaletta","email":"VittGam@vittgam.net"},{"name":"Daniel Stockman","email":"daniel.stockman@gmail.com"}],"license":"MIT","dependencies":{"config-chain":"~1.1.5","nopt":"~2.1.1"},"readme":"# JS Beautifier\n\n...or, more specifically, all of the code powering\n[jsbeautifier.org](http://jsbeautifier.org/).\n\nThis little beautifier will reformat and reindent bookmarklets, ugly\nJavaScript, unpack scripts packed by Dean Edward’s popular packer,\nas well as deobfuscate scripts processed by\n[javascriptobfuscator.com](http://javascriptobfuscator.com/).\n\n## Usage\n\nTo beautify from the command-line you can use the provided Python script/library or [npm](http://npmjs.org/) package.\n\n### Python\n\n`./js-beautify file.js` beautifies a file, output goes to `stdout`.\n\nTo use `jsbeautifier` as a library is simple:\n\n``` python\nimport jsbeautifier\nres = jsbeautifier.beautify('your javascript string')\nres = jsbeautifier.beautify_file('some_file.js')\n```\n\n...or, to specify some options:\n\n``` python\nopts = jsbeautifier.default_options()\nopts.indent_size = 2\nres = jsbeautifier.beautify('some javascript', opts)\n```\n\n### JavaScript\n\nAs an alternative to the Python script, you may install the NPM package `js-beautify`. When installed globally, it provides an executable `js-beautify` script. As with the Python script, the beautified result is sent to `stdout` unless otherwise configured.\n\n```bash\n$ npm -g install js-beautify\n$ js-beautify foo.js\n```\n\nYou can also use `js-beautify` as a `node` library (install locally, the `npm` default):\n\n```bash\n$ npm install js-beautify\n```\n\n```js\nvar beautify = require('js-beautify').js_beautify,\n    fs = require('fs');\n\nfs.readFile('foo.js', 'utf8', function (err, data) {\n    if (err) {\n        throw err;\n    }\n    console.log(beautify(data, { indent_size: 2 }));\n});\n```\n\n### Options\n\nThese are the command-line flags for both Python and JS scripts:\n\n```text\nCLI Options:\n  -f, --file                    Input file(s) (Pass '-' for stdin). These can also be passed directly.\n  -r, --replace                 Write output in-place, replacing input\n  -o, --outfile                 Write output to file (default stdout)\n  --config                      Path to config file\n  -v, --version                 Show the version\n  -h, --help                    Show this help\n\nBeautifier Options:\n  -s, --indent-size             Indentation size [4]\n  -c, --indent-char             Indentation character [\" \"]\n  -l, --indent-level            Initial indentation level [0]\n  -t, --indent-with-tabs        Indent with tabs, overrides -s and -c\n  -p, --preserve-newlines       Preserve existing line-breaks (--no-preserve-newlines disables)\n  -m, --max-preserve-newlines   Maximum number of line-breaks to be preserved in one chunk [10]\n  -j, --jslint-happy            Enable jslint-stricter mode\n  -b, --brace-style             [collapse|expand|end-expand|expand-strict] [\"collapse\"]\n  -B, --break-chained-methods   Break chained method calls across subsequent lines\n  -k, --keep-array-indentation  Preserve array indentation\n  -x, --unescape-strings        Decode printable characters encoded in xNN notation\n  -g, --good-stuff              Warm the cockles of Crockford's heart\n```\n\nThese largely correspond to the underscored option keys for both library interfaces, which have these defaults:\n\n```json\n{\n    \"indent_size\": 4,\n    \"indent_char\": \" \",\n    \"indent_level\": 0,\n    \"indent_with_tabs\": false,\n    \"preserve_newlines\": true,\n    \"max_preserve_newlines\": 10,\n    \"jslint_happy\": false,\n    \"brace_style\": \"collapse\",\n    \"keep_array_indentation\": false,\n    \"keep_function_indentation\": false,\n    \"space_before_conditional\": true,\n    \"break_chained_methods\": false,\n    \"eval_code\": false,\n    \"unescape_strings\": false\n}\n```\n\nIn addition to CLI arguments, you may pass config to the JS executable via:\n\n * any `jsbeautify_`-prefixed environment variables\n * a `JSON`-formatted file indicated by the `--config` parameter\n * a `.jsbeautifyrc` file containing `JSON` data at any level of the filesystem above `$PWD`\n\nConfiguration sources provided earlier in this stack will override later ones.\n\nYou might notice that the CLI options and defaults hash aren't 100% correlated. Historically, the Python and JS APIs have not been 100% identical. For example, `space_before_conditional` is currently JS-only, and not addressable from the CLI script. There are a few other additional cases keeping us from 100% API-compatibility. Patches welcome!\n\n## License\n\nYou are free to use this in any way you want, in case you find this\nuseful or working for you. (MIT)\n\n## Credits\n\nWritten by Einar Lielmanis, <einar@jsbeautifier.org>\nPython version flourished by Stefano Sanfilippo <a.little.coder@gmail.com>\n\nThanks to Jason Diamond, Patrick Hof, Nochum Sossonko, Andreas Schneider, Dave\nVasilevsky, Vital Batmanov, Ron Baldwin, Gabriel Harrison, Chris J. Shull,\nMathias Bynens, Vittorio Gambaletta and others.\n","readmeFilename":"README.md","_id":"js-beautify@0.3.5","dist":{"shasum":"d7fcc253989d672225fd8f98e3120bdc97b7019d","tarball":"http://registry.npmjs.org/js-beautify/-/js-beautify-0.3.5.tgz"},"_from":".","_npmVersion":"1.2.11","_npmUser":{"name":"evocateur","email":"daniel.stockman@gmail.com"},"maintainers":[{"name":"evocateur","email":"daniel.stockman@gmail.com"}],"deprecated":"major indenting and html bug fixes in 1.4.0."},"0.3.6":{"name":"js-beautify","version":"0.3.6","description":"jsbeautifier.org for node","main":"beautify.js","preferGlobal":true,"bin":{"css-beautify":"./cli.js","html-beautify":"./cli.js","js-beautify":"./cli.js"},"directories":{"test":"tests"},"scripts":{"test":"node ./tests/beautify-tests.js"},"repository":{"type":"git","url":"git://github.com/evocateur/js-beautify.git#node-package"},"keywords":["beautify","beautifier","code-quality"],"author":{"name":"Einar Lielmanis","email":"einar@jsbeautifier.org"},"contributors":[{"name":"Vital Batmanov","email":"vital76@gmail.com"},{"name":"Chris J. Shull","email":"chrisjshull@gmail.com"},{"name":"Gian Marco Gherardi","email":"gianmarco.gherardi@gmail.com"},{"name":"Stan","email":"stasson@orc.ru"},{"name":"Vittorio Gambaletta","email":"VittGam@vittgam.net"},{"name":"Daniel Stockman","email":"daniel.stockman@gmail.com"}],"license":"MIT","dependencies":{"config-chain":"~1.1.5","nopt":"~2.1.1"},"readme":"# JS Beautifier\n\n...or, more specifically, all of the code powering\n[jsbeautifier.org](http://jsbeautifier.org/).\n\nThis little beautifier will reformat and reindent bookmarklets, ugly\nJavaScript, unpack scripts packed by Dean Edward’s popular packer,\nas well as deobfuscate scripts processed by\n[javascriptobfuscator.com](http://javascriptobfuscator.com/).\n\n## Usage\n\nTo beautify from the command-line you can use the provided Python script/library or [npm](http://npmjs.org/) package.\n\n### Python\n\n`./js-beautify file.js` beautifies a file, output goes to `stdout`.\n\nTo use `jsbeautifier` as a library is simple:\n\n``` python\nimport jsbeautifier\nres = jsbeautifier.beautify('your javascript string')\nres = jsbeautifier.beautify_file('some_file.js')\n```\n\n...or, to specify some options:\n\n``` python\nopts = jsbeautifier.default_options()\nopts.indent_size = 2\nres = jsbeautifier.beautify('some javascript', opts)\n```\n\n### JavaScript\n\nAs an alternative to the Python script, you may install the NPM package `js-beautify`. When installed globally, it provides an executable `js-beautify` script. As with the Python script, the beautified result is sent to `stdout` unless otherwise configured.\n\n```bash\n$ npm -g install js-beautify\n$ js-beautify foo.js\n```\n\nYou can also use `js-beautify` as a `node` library (install locally, the `npm` default):\n\n```bash\n$ npm install js-beautify\n```\n\n```js\nvar beautify = require('js-beautify').js_beautify,\n    fs = require('fs');\n\nfs.readFile('foo.js', 'utf8', function (err, data) {\n    if (err) {\n        throw err;\n    }\n    console.log(beautify(data, { indent_size: 2 }));\n});\n```\n\n### Options\n\nThese are the command-line flags for both Python and JS scripts:\n\n```text\nCLI Options:\n  -f, --file                    Input file(s) (Pass '-' for stdin). These can also be passed directly.\n  -r, --replace                 Write output in-place, replacing input\n  -o, --outfile                 Write output to file (default stdout)\n  --config                      Path to config file\n  --type                        [js|css|html] [\"js\"]\n  -q, --quiet                   Suppress logging to stdout\n  -v, --version                 Show the version\n  -h, --help                    Show this help\n\nBeautifier Options:\n  -s, --indent-size             Indentation size [4]\n  -c, --indent-char             Indentation character [\" \"]\n  -l, --indent-level            Initial indentation level [0]\n  -t, --indent-with-tabs        Indent with tabs, overrides -s and -c\n  -p, --preserve-newlines       Preserve existing line-breaks (--no-preserve-newlines disables)\n  -m, --max-preserve-newlines   Maximum number of line-breaks to be preserved in one chunk [10]\n  -j, --jslint-happy            Enable jslint-stricter mode\n  -b, --brace-style             [collapse|expand|end-expand|expand-strict] [\"collapse\"]\n  -B, --break-chained-methods   Break chained method calls across subsequent lines\n  -k, --keep-array-indentation  Preserve array indentation\n  -x, --unescape-strings        Decode printable characters encoded in xNN notation\n  -w, --wrap-line-length        Wrap lines at next opportunity after N characters [0]\n  --good-stuff                  Warm the cockles of Crockford's heart\n```\n\nThese largely correspond to the underscored option keys for both library interfaces, which have these defaults:\n\n```json\n{\n    \"indent_size\": 4,\n    \"indent_char\": \" \",\n    \"indent_level\": 0,\n    \"indent_with_tabs\": false,\n    \"preserve_newlines\": true,\n    \"max_preserve_newlines\": 10,\n    \"jslint_happy\": false,\n    \"brace_style\": \"collapse\",\n    \"keep_array_indentation\": false,\n    \"keep_function_indentation\": false,\n    \"space_before_conditional\": true,\n    \"break_chained_methods\": false,\n    \"eval_code\": false,\n    \"unescape_strings\": false,\n    \"wrap_line_length\": 0\n}\n```\n\nIn addition to CLI arguments, you may pass config to the JS executable via:\n\n * any `jsbeautify_`-prefixed environment variables\n * a `JSON`-formatted file indicated by the `--config` parameter\n * a `.jsbeautifyrc` file containing `JSON` data at any level of the filesystem above `$PWD`\n\nConfiguration sources provided earlier in this stack will override later ones.\n\nYou might notice that the CLI options and defaults hash aren't 100% correlated. Historically, the Python and JS APIs have not been 100% identical. For example, `space_before_conditional` is currently JS-only, and not addressable from the CLI script. There are a few other additional cases keeping us from 100% API-compatibility. Patches welcome!\n\n#### CSS & HTML\n\nIn addition to the `js-beautify` executable, `css-beautify` and `html-beautify` are also provided as an easy interface into those scripts. Alternatively, `js-beautify --css` or `js-beautify --html` will accomplish the same thing, respectively.\n\n```js\n// Programmatic access\nvar beautify_js = require('js-beautify'); // also available under \"js\" export\nvar beautify_css = require('js-beautify').css;\nvar beautify_html = require('js-beautify').html;\n\n// All methods accept two arguments, the string to be beautified, and an options object.\n```\n\nThe CSS & HTML beautifiers are much simpler in scope, and possess far fewer options.\n\n```text\nCSS Beautifier Options:\n  -s, --indent-size             Indentation size [4]\n  -c, --indent-char             Indentation character [\" \"]\n\nHTML Beautifier Options:\n  -s, --indent-size             Indentation size [4]\n  -c, --indent-char             Indentation character [\" \"]\n  -b, --brace-style             [collapse|expand|end-expand] [\"collapse\"]\n  -S, --indent-scripts          [keep|separate|normal] [\"normal\"]\n  -W, --max-char                Maximum characters per line (0 disables) [250]\n  -U, --unformatted             List of tags (defaults to inline) that should not be reformatted\n```\n\n## License\n\nYou are free to use this in any way you want, in case you find this\nuseful or working for you. (MIT)\n\n## Credits\n\nWritten by Einar Lielmanis, <einar@jsbeautifier.org>\nPython version flourished by Stefano Sanfilippo <a.little.coder@gmail.com>\n\nThanks to Jason Diamond, Patrick Hof, Nochum Sossonko, Andreas Schneider, Dave\nVasilevsky, Vital Batmanov, Ron Baldwin, Gabriel Harrison, Chris J. Shull,\nMathias Bynens, Vittorio Gambaletta and others.\n","readmeFilename":"README.md","_id":"js-beautify@0.3.6","dist":{"shasum":"ab846007eb680c3d452441c2ec57bb4e15c99da5","tarball":"http://registry.npmjs.org/js-beautify/-/js-beautify-0.3.6.tgz"},"_from":".","_npmVersion":"1.2.11","_npmUser":{"name":"evocateur","email":"daniel.stockman@gmail.com"},"maintainers":[{"name":"evocateur","email":"daniel.stockman@gmail.com"}],"deprecated":"major indenting and html bug fixes in 1.4.0."},"0.3.7":{"name":"js-beautify","version":"0.3.7","description":"jsbeautifier.org for node","main":"beautify.js","preferGlobal":true,"bin":{"css-beautify":"./cli.js","html-beautify":"./cli.js","js-beautify":"./cli.js"},"directories":{"test":"tests"},"scripts":{"test":"node ./tests/beautify-tests.js"},"repository":{"type":"git","url":"git://github.com/evocateur/js-beautify.git#node-package"},"keywords":["beautify","beautifier","code-quality"],"author":{"name":"Einar Lielmanis","email":"einar@jsbeautifier.org"},"contributors":[{"name":"Vital Batmanov","email":"vital76@gmail.com"},{"name":"Chris J. Shull","email":"chrisjshull@gmail.com"},{"name":"Gian Marco Gherardi","email":"gianmarco.gherardi@gmail.com"},{"name":"Stan","email":"stasson@orc.ru"},{"name":"Vittorio Gambaletta","email":"VittGam@vittgam.net"},{"name":"Daniel Stockman","email":"daniel.stockman@gmail.com"}],"license":"MIT","dependencies":{"config-chain":"~1.1.5","nopt":"~2.1.1"},"readme":"# JS Beautifier\n\n...or, more specifically, all of the code powering\n[jsbeautifier.org](http://jsbeautifier.org/).\n\nThis little beautifier will reformat and reindent bookmarklets, ugly\nJavaScript, unpack scripts packed by Dean Edward’s popular packer,\nas well as deobfuscate scripts processed by\n[javascriptobfuscator.com](http://javascriptobfuscator.com/).\n\n## Usage\n\nTo beautify from the command-line you can use the provided Python script/library or [npm](http://npmjs.org/) package.\n\n### Python\n\n`./js-beautify file.js` beautifies a file, output goes to `stdout`.\n\nTo use `jsbeautifier` as a library is simple:\n\n``` python\nimport jsbeautifier\nres = jsbeautifier.beautify('your javascript string')\nres = jsbeautifier.beautify_file('some_file.js')\n```\n\n...or, to specify some options:\n\n``` python\nopts = jsbeautifier.default_options()\nopts.indent_size = 2\nres = jsbeautifier.beautify('some javascript', opts)\n```\n\n### JavaScript\n\nAs an alternative to the Python script, you may install the NPM package `js-beautify`. When installed globally, it provides an executable `js-beautify` script. As with the Python script, the beautified result is sent to `stdout` unless otherwise configured.\n\n```bash\n$ npm -g install js-beautify\n$ js-beautify foo.js\n```\n\nYou can also use `js-beautify` as a `node` library (install locally, the `npm` default):\n\n```bash\n$ npm install js-beautify\n```\n\n```js\nvar beautify = require('js-beautify').js_beautify,\n    fs = require('fs');\n\nfs.readFile('foo.js', 'utf8', function (err, data) {\n    if (err) {\n        throw err;\n    }\n    console.log(beautify(data, { indent_size: 2 }));\n});\n```\n\n### Options\n\nThese are the command-line flags for both Python and JS scripts:\n\n```text\nCLI Options:\n  -f, --file                    Input file(s) (Pass '-' for stdin). These can also be passed directly.\n  -r, --replace                 Write output in-place, replacing input\n  -o, --outfile                 Write output to file (default stdout)\n  --config                      Path to config file\n  --type                        [js|css|html] [\"js\"]\n  -q, --quiet                   Suppress logging to stdout\n  -v, --version                 Show the version\n  -h, --help                    Show this help\n\nBeautifier Options:\n  -s, --indent-size             Indentation size [4]\n  -c, --indent-char             Indentation character [\" \"]\n  -l, --indent-level            Initial indentation level [0]\n  -t, --indent-with-tabs        Indent with tabs, overrides -s and -c\n  -p, --preserve-newlines       Preserve existing line-breaks (--no-preserve-newlines disables)\n  -m, --max-preserve-newlines   Maximum number of line-breaks to be preserved in one chunk [10]\n  -j, --jslint-happy            Enable jslint-stricter mode\n  -b, --brace-style             [collapse|expand|end-expand|expand-strict] [\"collapse\"]\n  -B, --break-chained-methods   Break chained method calls across subsequent lines\n  -k, --keep-array-indentation  Preserve array indentation\n  -x, --unescape-strings        Decode printable characters encoded in xNN notation\n  -w, --wrap-line-length        Wrap lines at next opportunity after N characters [0]\n  --good-stuff                  Warm the cockles of Crockford's heart\n```\n\nThese largely correspond to the underscored option keys for both library interfaces, which have these defaults:\n\n```json\n{\n    \"indent_size\": 4,\n    \"indent_char\": \" \",\n    \"indent_level\": 0,\n    \"indent_with_tabs\": false,\n    \"preserve_newlines\": true,\n    \"max_preserve_newlines\": 10,\n    \"jslint_happy\": false,\n    \"brace_style\": \"collapse\",\n    \"keep_array_indentation\": false,\n    \"keep_function_indentation\": false,\n    \"space_before_conditional\": true,\n    \"break_chained_methods\": false,\n    \"eval_code\": false,\n    \"unescape_strings\": false,\n    \"wrap_line_length\": 0\n}\n```\n\nIn addition to CLI arguments, you may pass config to the JS executable via:\n\n * any `jsbeautify_`-prefixed environment variables\n * a `JSON`-formatted file indicated by the `--config` parameter\n * a `.jsbeautifyrc` file containing `JSON` data at any level of the filesystem above `$PWD`\n\nConfiguration sources provided earlier in this stack will override later ones.\n\nYou might notice that the CLI options and defaults hash aren't 100% correlated. Historically, the Python and JS APIs have not been 100% identical. For example, `space_before_conditional` is currently JS-only, and not addressable from the CLI script. There are a few other additional cases keeping us from 100% API-compatibility. Patches welcome!\n\n#### CSS & HTML\n\nIn addition to the `js-beautify` executable, `css-beautify` and `html-beautify` are also provided as an easy interface into those scripts. Alternatively, `js-beautify --css` or `js-beautify --html` will accomplish the same thing, respectively.\n\n```js\n// Programmatic access\nvar beautify_js = require('js-beautify'); // also available under \"js\" export\nvar beautify_css = require('js-beautify').css;\nvar beautify_html = require('js-beautify').html;\n\n// All methods accept two arguments, the string to be beautified, and an options object.\n```\n\nThe CSS & HTML beautifiers are much simpler in scope, and possess far fewer options.\n\n```text\nCSS Beautifier Options:\n  -s, --indent-size             Indentation size [4]\n  -c, --indent-char             Indentation character [\" \"]\n\nHTML Beautifier Options:\n  -s, --indent-size             Indentation size [4]\n  -c, --indent-char             Indentation character [\" \"]\n  -b, --brace-style             [collapse|expand|end-expand] [\"collapse\"]\n  -S, --indent-scripts          [keep|separate|normal] [\"normal\"]\n  -W, --max-char                Maximum characters per line (0 disables) [250]\n  -U, --unformatted             List of tags (defaults to inline) that should not be reformatted\n```\n\n## License\n\nYou are free to use this in any way you want, in case you find this\nuseful or working for you. (MIT)\n\n## Credits\n\nWritten by Einar Lielmanis, <einar@jsbeautifier.org>\nPython version flourished by Stefano Sanfilippo <a.little.coder@gmail.com>\n\nThanks to Jason Diamond, Patrick Hof, Nochum Sossonko, Andreas Schneider, Dave\nVasilevsky, Vital Batmanov, Ron Baldwin, Gabriel Harrison, Chris J. Shull,\nMathias Bynens, Vittorio Gambaletta and others.\n","readmeFilename":"README.md","_id":"js-beautify@0.3.7","dist":{"shasum":"a9b8e8f5136d96e1a1f56a299a8e21de13338cbe","tarball":"http://registry.npmjs.org/js-beautify/-/js-beautify-0.3.7.tgz"},"_from":".","_npmVersion":"1.2.11","_npmUser":{"name":"evocateur","email":"daniel.stockman@gmail.com"},"maintainers":[{"name":"evocateur","email":"daniel.stockman@gmail.com"}],"deprecated":"major indenting and html bug fixes in 1.4.0."},"0.3.8":{"name":"js-beautify","version":"0.3.8","description":"jsbeautifier.org for node","main":"beautify.js","preferGlobal":true,"bin":{"css-beautify":"./cli.js","html-beautify":"./cli.js","js-beautify":"./cli.js"},"directories":{"test":"tests"},"scripts":{"test":"node ./tests/beautify-tests.js"},"repository":{"type":"git","url":"git://github.com/evocateur/js-beautify.git#node-package"},"keywords":["beautify","beautifier","code-quality"],"author":{"name":"Einar Lielmanis","email":"einar@jsbeautifier.org"},"contributors":[{"name":"Vital Batmanov","email":"vital76@gmail.com"},{"name":"Chris J. Shull","email":"chrisjshull@gmail.com"},{"name":"Gian Marco Gherardi","email":"gianmarco.gherardi@gmail.com"},{"name":"Stan","email":"stasson@orc.ru"},{"name":"Vittorio Gambaletta","email":"VittGam@vittgam.net"},{"name":"Daniel Stockman","email":"daniel.stockman@gmail.com"}],"license":"MIT","dependencies":{"config-chain":"~1.1.5","nopt":"~2.1.1"},"readme":"# JS Beautifier\n\n...or, more specifically, all of the code powering\n[jsbeautifier.org](http://jsbeautifier.org/).\n\nThis little beautifier will reformat and reindent bookmarklets, ugly\nJavaScript, unpack scripts packed by Dean Edward’s popular packer,\nas well as deobfuscate scripts processed by\n[javascriptobfuscator.com](http://javascriptobfuscator.com/).\n\n## Usage\n\nTo beautify from the command-line you can use the provided Python script/library or [npm](http://npmjs.org/) package.\n\n### Python\n\n`./js-beautify file.js` beautifies a file, output goes to `stdout`.\n\nTo use `jsbeautifier` as a library is simple:\n\n``` python\nimport jsbeautifier\nres = jsbeautifier.beautify('your javascript string')\nres = jsbeautifier.beautify_file('some_file.js')\n```\n\n...or, to specify some options:\n\n``` python\nopts = jsbeautifier.default_options()\nopts.indent_size = 2\nres = jsbeautifier.beautify('some javascript', opts)\n```\n\n### JavaScript\n\nAs an alternative to the Python script, you may install the NPM package `js-beautify`. When installed globally, it provides an executable `js-beautify` script. As with the Python script, the beautified result is sent to `stdout` unless otherwise configured.\n\n```bash\n$ npm -g install js-beautify\n$ js-beautify foo.js\n```\n\nYou can also use `js-beautify` as a `node` library (install locally, the `npm` default):\n\n```bash\n$ npm install js-beautify\n```\n\n```js\nvar beautify = require('js-beautify').js_beautify,\n    fs = require('fs');\n\nfs.readFile('foo.js', 'utf8', function (err, data) {\n    if (err) {\n        throw err;\n    }\n    console.log(beautify(data, { indent_size: 2 }));\n});\n```\n\n### Options\n\nThese are the command-line flags for both Python and JS scripts:\n\n```text\nCLI Options:\n  -f, --file                    Input file(s) (Pass '-' for stdin). These can also be passed directly.\n  -r, --replace                 Write output in-place, replacing input\n  -o, --outfile                 Write output to file (default stdout)\n  --config                      Path to config file\n  --type                        [js|css|html] [\"js\"]\n  -q, --quiet                   Suppress logging to stdout\n  -v, --version                 Show the version\n  -h, --help                    Show this help\n\nBeautifier Options:\n  -s, --indent-size             Indentation size [4]\n  -c, --indent-char             Indentation character [\" \"]\n  -l, --indent-level            Initial indentation level [0]\n  -t, --indent-with-tabs        Indent with tabs, overrides -s and -c\n  -p, --preserve-newlines       Preserve existing line-breaks (--no-preserve-newlines disables)\n  -m, --max-preserve-newlines   Maximum number of line-breaks to be preserved in one chunk [10]\n  -j, --jslint-happy            Enable jslint-stricter mode\n  -b, --brace-style             [collapse|expand|end-expand|expand-strict] [\"collapse\"]\n  -B, --break-chained-methods   Break chained method calls across subsequent lines\n  -k, --keep-array-indentation  Preserve array indentation\n  -x, --unescape-strings        Decode printable characters encoded in xNN notation\n  -w, --wrap-line-length        Wrap lines at next opportunity after N characters [0]\n  --good-stuff                  Warm the cockles of Crockford's heart\n```\n\nThese largely correspond to the underscored option keys for both library interfaces, which have these defaults:\n\n```json\n{\n    \"indent_size\": 4,\n    \"indent_char\": \" \",\n    \"indent_level\": 0,\n    \"indent_with_tabs\": false,\n    \"preserve_newlines\": true,\n    \"max_preserve_newlines\": 10,\n    \"jslint_happy\": false,\n    \"brace_style\": \"collapse\",\n    \"keep_array_indentation\": false,\n    \"keep_function_indentation\": false,\n    \"space_before_conditional\": true,\n    \"break_chained_methods\": false,\n    \"eval_code\": false,\n    \"unescape_strings\": false,\n    \"wrap_line_length\": 0\n}\n```\n\nIn addition to CLI arguments, you may pass config to the JS executable via:\n\n * any `jsbeautify_`-prefixed environment variables\n * a `JSON`-formatted file indicated by the `--config` parameter\n * a `.jsbeautifyrc` file containing `JSON` data at any level of the filesystem above `$PWD`\n\nConfiguration sources provided earlier in this stack will override later ones.\n\nYou might notice that the CLI options and defaults hash aren't 100% correlated. Historically, the Python and JS APIs have not been 100% identical. For example, `space_before_conditional` is currently JS-only, and not addressable from the CLI script. There are a few other additional cases keeping us from 100% API-compatibility. Patches welcome!\n\n#### CSS & HTML\n\nIn addition to the `js-beautify` executable, `css-beautify` and `html-beautify` are also provided as an easy interface into those scripts. Alternatively, `js-beautify --css` or `js-beautify --html` will accomplish the same thing, respectively.\n\n```js\n// Programmatic access\nvar beautify_js = require('js-beautify'); // also available under \"js\" export\nvar beautify_css = require('js-beautify').css;\nvar beautify_html = require('js-beautify').html;\n\n// All methods accept two arguments, the string to be beautified, and an options object.\n```\n\nThe CSS & HTML beautifiers are much simpler in scope, and possess far fewer options.\n\n```text\nCSS Beautifier Options:\n  -s, --indent-size             Indentation size [4]\n  -c, --indent-char             Indentation character [\" \"]\n\nHTML Beautifier Options:\n  -s, --indent-size             Indentation size [4]\n  -c, --indent-char             Indentation character [\" \"]\n  -b, --brace-style             [collapse|expand|end-expand] [\"collapse\"]\n  -S, --indent-scripts          [keep|separate|normal] [\"normal\"]\n  -W, --max-char                Maximum characters per line (0 disables) [250]\n  -U, --unformatted             List of tags (defaults to inline) that should not be reformatted\n```\n\n## License\n\nYou are free to use this in any way you want, in case you find this\nuseful or working for you. (MIT)\n\n## Credits\n\nWritten by Einar Lielmanis, <einar@jsbeautifier.org>\nPython version flourished by Stefano Sanfilippo <a.little.coder@gmail.com>\n\nThanks to Jason Diamond, Patrick Hof, Nochum Sossonko, Andreas Schneider, Dave\nVasilevsky, Vital Batmanov, Ron Baldwin, Gabriel Harrison, Chris J. Shull,\nMathias Bynens, Vittorio Gambaletta and others.\n","readmeFilename":"README.md","_id":"js-beautify@0.3.8","dist":{"shasum":"81669a7b831c7976b88891b343ec1390b6fa7e5a","tarball":"http://registry.npmjs.org/js-beautify/-/js-beautify-0.3.8.tgz"},"_from":".","_npmVersion":"1.2.11","_npmUser":{"name":"evocateur","email":"daniel.stockman@gmail.com"},"maintainers":[{"name":"evocateur","email":"daniel.stockman@gmail.com"}],"deprecated":"major indenting and html bug fixes in 1.4.0."},"0.3.9":{"name":"js-beautify","version":"0.3.9","description":"jsbeautifier.org for node","main":"beautify.js","preferGlobal":true,"bin":{"css-beautify":"./cli.js","html-beautify":"./cli.js","js-beautify":"./cli.js"},"directories":{"test":"tests"},"scripts":{"test":"node ./tests/beautify-tests.js"},"repository":{"type":"git","url":"git://github.com/evocateur/js-beautify.git#node-package"},"keywords":["beautify","beautifier","code-quality"],"author":{"name":"Einar Lielmanis","email":"einar@jsbeautifier.org"},"contributors":[{"name":"Vital Batmanov","email":"vital76@gmail.com"},{"name":"Chris J. Shull","email":"chrisjshull@gmail.com"},{"name":"Gian Marco Gherardi","email":"gianmarco.gherardi@gmail.com"},{"name":"Stan","email":"stasson@orc.ru"},{"name":"Vittorio Gambaletta","email":"VittGam@vittgam.net"},{"name":"Daniel Stockman","email":"daniel.stockman@gmail.com"}],"license":"MIT","dependencies":{"config-chain":"~1.1.5","nopt":"~2.1.1"},"readme":"# JS Beautifier\n\n...or, more specifically, all of the code powering\n[jsbeautifier.org](http://jsbeautifier.org/).\n\nThis little beautifier will reformat and reindent bookmarklets, ugly\nJavaScript, unpack scripts packed by Dean Edward’s popular packer,\nas well as deobfuscate scripts processed by\n[javascriptobfuscator.com](http://javascriptobfuscator.com/).\n\n## Usage\n\nTo beautify from the command-line you can use the provided Python script/library or [npm](http://npmjs.org/) package.\n\n### Python\n\n`./js-beautify file.js` beautifies a file, output goes to `stdout`.\n\nTo use `jsbeautifier` as a library is simple:\n\n``` python\nimport jsbeautifier\nres = jsbeautifier.beautify('your javascript string')\nres = jsbeautifier.beautify_file('some_file.js')\n```\n\n...or, to specify some options:\n\n``` python\nopts = jsbeautifier.default_options()\nopts.indent_size = 2\nres = jsbeautifier.beautify('some javascript', opts)\n```\n\n### JavaScript\n\nAs an alternative to the Python script, you may install the NPM package `js-beautify`. When installed globally, it provides an executable `js-beautify` script. As with the Python script, the beautified result is sent to `stdout` unless otherwise configured.\n\n```bash\n$ npm -g install js-beautify\n$ js-beautify foo.js\n```\n\nYou can also use `js-beautify` as a `node` library (install locally, the `npm` default):\n\n```bash\n$ npm install js-beautify\n```\n\n```js\nvar beautify = require('js-beautify').js_beautify,\n    fs = require('fs');\n\nfs.readFile('foo.js', 'utf8', function (err, data) {\n    if (err) {\n        throw err;\n    }\n    console.log(beautify(data, { indent_size: 2 }));\n});\n```\n\n### Options\n\nThese are the command-line flags for both Python and JS scripts:\n\n```text\nCLI Options:\n  -f, --file                    Input file(s) (Pass '-' for stdin). These can also be passed directly.\n  -r, --replace                 Write output in-place, replacing input\n  -o, --outfile                 Write output to file (default stdout)\n  --config                      Path to config file\n  --type                        [js|css|html] [\"js\"]\n  -q, --quiet                   Suppress logging to stdout\n  -v, --version                 Show the version\n  -h, --help                    Show this help\n\nBeautifier Options:\n  -s, --indent-size             Indentation size [4]\n  -c, --indent-char             Indentation character [\" \"]\n  -l, --indent-level            Initial indentation level [0]\n  -t, --indent-with-tabs        Indent with tabs, overrides -s and -c\n  -p, --preserve-newlines       Preserve existing line-breaks (--no-preserve-newlines disables)\n  -m, --max-preserve-newlines   Maximum number of line-breaks to be preserved in one chunk [10]\n  -j, --jslint-happy            Enable jslint-stricter mode\n  -b, --brace-style             [collapse|expand|end-expand|expand-strict] [\"collapse\"]\n  -B, --break-chained-methods   Break chained method calls across subsequent lines\n  -k, --keep-array-indentation  Preserve array indentation\n  -x, --unescape-strings        Decode printable characters encoded in xNN notation\n  -w, --wrap-line-length        Wrap lines at next opportunity after N characters [0]\n  --good-stuff                  Warm the cockles of Crockford's heart\n```\n\nThese largely correspond to the underscored option keys for both library interfaces, which have these defaults:\n\n```json\n{\n    \"indent_size\": 4,\n    \"indent_char\": \" \",\n    \"indent_level\": 0,\n    \"indent_with_tabs\": false,\n    \"preserve_newlines\": true,\n    \"max_preserve_newlines\": 10,\n    \"jslint_happy\": false,\n    \"brace_style\": \"collapse\",\n    \"keep_array_indentation\": false,\n    \"keep_function_indentation\": false,\n    \"space_before_conditional\": true,\n    \"break_chained_methods\": false,\n    \"eval_code\": false,\n    \"unescape_strings\": false,\n    \"wrap_line_length\": 0\n}\n```\n\nIn addition to CLI arguments, you may pass config to the JS executable via:\n\n * any `jsbeautify_`-prefixed environment variables\n * a `JSON`-formatted file indicated by the `--config` parameter\n * a `.jsbeautifyrc` file containing `JSON` data at any level of the filesystem above `$PWD`\n\nConfiguration sources provided earlier in this stack will override later ones.\n\nYou might notice that the CLI options and defaults hash aren't 100% correlated. Historically, the Python and JS APIs have not been 100% identical. For example, `space_before_conditional` is currently JS-only, and not addressable from the CLI script. There are a few other additional cases keeping us from 100% API-compatibility. Patches welcome!\n\n#### CSS & HTML\n\nIn addition to the `js-beautify` executable, `css-beautify` and `html-beautify` are also provided as an easy interface into those scripts. Alternatively, `js-beautify --css` or `js-beautify --html` will accomplish the same thing, respectively.\n\n```js\n// Programmatic access\nvar beautify_js = require('js-beautify'); // also available under \"js\" export\nvar beautify_css = require('js-beautify').css;\nvar beautify_html = require('js-beautify').html;\n\n// All methods accept two arguments, the string to be beautified, and an options object.\n```\n\nThe CSS & HTML beautifiers are much simpler in scope, and possess far fewer options.\n\n```text\nCSS Beautifier Options:\n  -s, --indent-size             Indentation size [4]\n  -c, --indent-char             Indentation character [\" \"]\n\nHTML Beautifier Options:\n  -s, --indent-size             Indentation size [4]\n  -c, --indent-char             Indentation character [\" \"]\n  -b, --brace-style             [collapse|expand|end-expand] [\"collapse\"]\n  -S, --indent-scripts          [keep|separate|normal] [\"normal\"]\n  -W, --max-char                Maximum characters per line (0 disables) [250]\n  -U, --unformatted             List of tags (defaults to inline) that should not be reformatted\n```\n\n## License\n\nYou are free to use this in any way you want, in case you find this\nuseful or working for you. (MIT)\n\n## Credits\n\nWritten by Einar Lielmanis, <einar@jsbeautifier.org>\nPython version flourished by Stefano Sanfilippo <a.little.coder@gmail.com>\n\nThanks to Jason Diamond, Patrick Hof, Nochum Sossonko, Andreas Schneider, Dave\nVasilevsky, Vital Batmanov, Ron Baldwin, Gabriel Harrison, Chris J. Shull,\nMathias Bynens, Vittorio Gambaletta and others.\n","readmeFilename":"README.md","_id":"js-beautify@0.3.9","dist":{"shasum":"8ecc0d5a3124c014c3a1a40e792092e9dbc556ba","tarball":"http://registry.npmjs.org/js-beautify/-/js-beautify-0.3.9.tgz"},"_from":".","_npmVersion":"1.2.11","_npmUser":{"name":"evocateur","email":"daniel.stockman@gmail.com"},"maintainers":[{"name":"evocateur","email":"daniel.stockman@gmail.com"}],"deprecated":"major indenting and html bug fixes in 1.4.0."},"0.4.0":{"name":"js-beautify","version":"0.4.0","description":"jsbeautifier.org for node","main":"beautify.js","preferGlobal":true,"bin":{"css-beautify":"./cli.js","html-beautify":"./cli.js","js-beautify":"./cli.js"},"directories":{"test":"tests"},"scripts":{"test":"node ./tests/beautify-tests.js"},"repository":{"type":"git","url":"git://github.com/evocateur/js-beautify.git#node-package"},"keywords":["beautify","beautifier","code-quality"],"author":{"name":"Einar Lielmanis","email":"einar@jsbeautifier.org"},"contributors":[{"name":"Vital Batmanov","email":"vital76@gmail.com"},{"name":"Chris J. Shull","email":"chrisjshull@gmail.com"},{"name":"Gian Marco Gherardi","email":"gianmarco.gherardi@gmail.com"},{"name":"Stan","email":"stasson@orc.ru"},{"name":"Vittorio Gambaletta","email":"VittGam@vittgam.net"},{"name":"Daniel Stockman","email":"daniel.stockman@gmail.com"}],"license":"MIT","dependencies":{"config-chain":"~1.1.5","nopt":"~2.1.1"},"readme":"# JS Beautifier\n\n...or, more specifically, all of the code powering\n[jsbeautifier.org](http://jsbeautifier.org/).\n\nThis little beautifier will reformat and reindent bookmarklets, ugly\nJavaScript, unpack scripts packed by Dean Edward’s popular packer,\nas well as deobfuscate scripts processed by\n[javascriptobfuscator.com](http://javascriptobfuscator.com/).\n\n## Usage\n\nTo beautify from the command-line you can use the provided Python script/library or [npm](http://npmjs.org/) package.\n\n### Python\n\n`./js-beautify file.js` beautifies a file, output goes to `stdout`.\n\nTo use `jsbeautifier` as a library is simple:\n\n``` python\nimport jsbeautifier\nres = jsbeautifier.beautify('your javascript string')\nres = jsbeautifier.beautify_file('some_file.js')\n```\n\n...or, to specify some options:\n\n``` python\nopts = jsbeautifier.default_options()\nopts.indent_size = 2\nres = jsbeautifier.beautify('some javascript', opts)\n```\n\n### JavaScript\n\nAs an alternative to the Python script, you may install the NPM package `js-beautify`. When installed globally, it provides an executable `js-beautify` script. As with the Python script, the beautified result is sent to `stdout` unless otherwise configured.\n\n```bash\n$ npm -g install js-beautify\n$ js-beautify foo.js\n```\n\nYou can also use `js-beautify` as a `node` library (install locally, the `npm` default):\n\n```bash\n$ npm install js-beautify\n```\n\n```js\nvar beautify = require('js-beautify').js_beautify,\n    fs = require('fs');\n\nfs.readFile('foo.js', 'utf8', function (err, data) {\n    if (err) {\n        throw err;\n    }\n    console.log(beautify(data, { indent_size: 2 }));\n});\n```\n\n### Options\n\nThese are the command-line flags for both Python and JS scripts:\n\n```text\nCLI Options:\n  -f, --file                    Input file(s) (Pass '-' for stdin). These can also be passed directly.\n  -r, --replace                 Write output in-place, replacing input\n  -o, --outfile                 Write output to file (default stdout)\n  --config                      Path to config file\n  --type                        [js|css|html] [\"js\"]\n  -q, --quiet                   Suppress logging to stdout\n  -v, --version                 Show the version\n  -h, --help                    Show this help\n\nBeautifier Options:\n  -s, --indent-size             Indentation size [4]\n  -c, --indent-char             Indentation character [\" \"]\n  -l, --indent-level            Initial indentation level [0]\n  -t, --indent-with-tabs        Indent with tabs, overrides -s and -c\n  -p, --preserve-newlines       Preserve existing line-breaks (--no-preserve-newlines disables)\n  -m, --max-preserve-newlines   Maximum number of line-breaks to be preserved in one chunk [10]\n  -j, --jslint-happy            Enable jslint-stricter mode\n  -b, --brace-style             [collapse|expand|end-expand|expand-strict] [\"collapse\"]\n  -B, --break-chained-methods   Break chained method calls across subsequent lines\n  -k, --keep-array-indentation  Preserve array indentation\n  -x, --unescape-strings        Decode printable characters encoded in xNN notation\n  -w, --wrap-line-length        Wrap lines at next opportunity after N characters [0]\n  --good-stuff                  Warm the cockles of Crockford's heart\n```\n\nThese largely correspond to the underscored option keys for both library interfaces, which have these defaults:\n\n```json\n{\n    \"indent_size\": 4,\n    \"indent_char\": \" \",\n    \"indent_level\": 0,\n    \"indent_with_tabs\": false,\n    \"preserve_newlines\": true,\n    \"max_preserve_newlines\": 10,\n    \"jslint_happy\": false,\n    \"brace_style\": \"collapse\",\n    \"keep_array_indentation\": false,\n    \"keep_function_indentation\": false,\n    \"space_before_conditional\": true,\n    \"break_chained_methods\": false,\n    \"eval_code\": false,\n    \"unescape_strings\": false,\n    \"wrap_line_length\": 0\n}\n```\n\nIn addition to CLI arguments, you may pass config to the JS executable via:\n\n * any `jsbeautify_`-prefixed environment variables\n * a `JSON`-formatted file indicated by the `--config` parameter\n * a `.jsbeautifyrc` file containing `JSON` data at any level of the filesystem above `$PWD`\n\nConfiguration sources provided earlier in this stack will override later ones.\n\nYou might notice that the CLI options and defaults hash aren't 100% correlated. Historically, the Python and JS APIs have not been 100% identical. For example, `space_before_conditional` is currently JS-only, and not addressable from the CLI script. There are a few other additional cases keeping us from 100% API-compatibility. Patches welcome!\n\n#### CSS & HTML\n\nIn addition to the `js-beautify` executable, `css-beautify` and `html-beautify` are also provided as an easy interface into those scripts. Alternatively, `js-beautify --css` or `js-beautify --html` will accomplish the same thing, respectively.\n\n```js\n// Programmatic access\nvar beautify_js = require('js-beautify'); // also available under \"js\" export\nvar beautify_css = require('js-beautify').css;\nvar beautify_html = require('js-beautify').html;\n\n// All methods accept two arguments, the string to be beautified, and an options object.\n```\n\nThe CSS & HTML beautifiers are much simpler in scope, and possess far fewer options.\n\n```text\nCSS Beautifier Options:\n  -s, --indent-size             Indentation size [4]\n  -c, --indent-char             Indentation character [\" \"]\n\nHTML Beautifier Options:\n  -s, --indent-size             Indentation size [4]\n  -c, --indent-char             Indentation character [\" \"]\n  -b, --brace-style             [collapse|expand|end-expand] [\"collapse\"]\n  -S, --indent-scripts          [keep|separate|normal] [\"normal\"]\n  -W, --max-char                Maximum characters per line (0 disables) [250]\n  -U, --unformatted             List of tags (defaults to inline) that should not be reformatted\n```\n\n## License\n\nYou are free to use this in any way you want, in case you find this\nuseful or working for you. (MIT)\n\n## Credits\n\nWritten by Einar Lielmanis, <einar@jsbeautifier.org>\nPython version flourished by Stefano Sanfilippo <a.little.coder@gmail.com>\n\nThanks to Jason Diamond, Patrick Hof, Nochum Sossonko, Andreas Schneider, Dave\nVasilevsky, Vital Batmanov, Ron Baldwin, Gabriel Harrison, Chris J. Shull,\nMathias Bynens, Vittorio Gambaletta and others.\n","readmeFilename":"README.md","_id":"js-beautify@0.4.0","dist":{"shasum":"6e15f019354f6b0e029c8156f7b76a422d3811f8","tarball":"http://registry.npmjs.org/js-beautify/-/js-beautify-0.4.0.tgz"},"_from":".","_npmVersion":"1.2.11","_npmUser":{"name":"evocateur","email":"daniel.stockman@gmail.com"},"maintainers":[{"name":"evocateur","email":"daniel.stockman@gmail.com"}],"deprecated":"major indenting and html bug fixes in 1.4.0."},"0.4.1":{"name":"js-beautify","version":"0.4.1","description":"jsbeautifier.org for node","main":"beautify.js","preferGlobal":true,"bin":{"css-beautify":"./cli.js","html-beautify":"./cli.js","js-beautify":"./cli.js"},"directories":{"test":"tests"},"scripts":{"test":"node ./tests/beautify-tests.js"},"repository":{"type":"git","url":"git://github.com/evocateur/js-beautify.git#node-package"},"keywords":["beautify","beautifier","code-quality"],"author":{"name":"Einar Lielmanis","email":"einar@jsbeautifier.org"},"contributors":[{"name":"Vital Batmanov","email":"vital76@gmail.com"},{"name":"Chris J. Shull","email":"chrisjshull@gmail.com"},{"name":"Gian Marco Gherardi","email":"gianmarco.gherardi@gmail.com"},{"name":"Stan","email":"stasson@orc.ru"},{"name":"Vittorio Gambaletta","email":"VittGam@vittgam.net"},{"name":"Daniel Stockman","email":"daniel.stockman@gmail.com"}],"license":"MIT","dependencies":{"config-chain":"~1.1.5","nopt":"~2.1.1"},"readme":"# JS Beautifier\n\n...or, more specifically, all of the code powering\n[jsbeautifier.org](http://jsbeautifier.org/).\n\nThis little beautifier will reformat and reindent bookmarklets, ugly\nJavaScript, unpack scripts packed by Dean Edward’s popular packer,\nas well as deobfuscate scripts processed by\n[javascriptobfuscator.com](http://javascriptobfuscator.com/).\n\n## Usage\n\nTo beautify from the command-line you can use the provided Python script/library or [npm](http://npmjs.org/) package.\n\n### Python\n\n`./js-beautify file.js` beautifies a file, output goes to `stdout`.\n\nTo use `jsbeautifier` as a library is simple:\n\n``` python\nimport jsbeautifier\nres = jsbeautifier.beautify('your javascript string')\nres = jsbeautifier.beautify_file('some_file.js')\n```\n\n...or, to specify some options:\n\n``` python\nopts = jsbeautifier.default_options()\nopts.indent_size = 2\nres = jsbeautifier.beautify('some javascript', opts)\n```\n\n### JavaScript\n\nAs an alternative to the Python script, you may install the NPM package `js-beautify`. When installed globally, it provides an executable `js-beautify` script. As with the Python script, the beautified result is sent to `stdout` unless otherwise configured.\n\n```bash\n$ npm -g install js-beautify\n$ js-beautify foo.js\n```\n\nYou can also use `js-beautify` as a `node` library (install locally, the `npm` default):\n\n```bash\n$ npm install js-beautify\n```\n\n```js\nvar beautify = require('js-beautify').js_beautify,\n    fs = require('fs');\n\nfs.readFile('foo.js', 'utf8', function (err, data) {\n    if (err) {\n        throw err;\n    }\n    console.log(beautify(data, { indent_size: 2 }));\n});\n```\n\n### Options\n\nThese are the command-line flags for both Python and JS scripts:\n\n```text\nCLI Options:\n  -f, --file                    Input file(s) (Pass '-' for stdin). These can also be passed directly.\n  -r, --replace                 Write output in-place, replacing input\n  -o, --outfile                 Write output to file (default stdout)\n  --config                      Path to config file\n  --type                        [js|css|html] [\"js\"]\n  -q, --quiet                   Suppress logging to stdout\n  -v, --version                 Show the version\n  -h, --help                    Show this help\n\nBeautifier Options:\n  -s, --indent-size             Indentation size [4]\n  -c, --indent-char             Indentation character [\" \"]\n  -l, --indent-level            Initial indentation level [0]\n  -t, --indent-with-tabs        Indent with tabs, overrides -s and -c\n  -p, --preserve-newlines       Preserve existing line-breaks (--no-preserve-newlines disables)\n  -m, --max-preserve-newlines   Maximum number of line-breaks to be preserved in one chunk [10]\n  -j, --jslint-happy            Enable jslint-stricter mode\n  -b, --brace-style             [collapse|expand|end-expand|expand-strict] [\"collapse\"]\n  -B, --break-chained-methods   Break chained method calls across subsequent lines\n  -k, --keep-array-indentation  Preserve array indentation\n  -x, --unescape-strings        Decode printable characters encoded in xNN notation\n  -w, --wrap-line-length        Wrap lines at next opportunity after N characters [0]\n  --good-stuff                  Warm the cockles of Crockford's heart\n```\n\nThese largely correspond to the underscored option keys for both library interfaces, which have these defaults:\n\n```json\n{\n    \"indent_size\": 4,\n    \"indent_char\": \" \",\n    \"indent_level\": 0,\n    \"indent_with_tabs\": false,\n    \"preserve_newlines\": true,\n    \"max_preserve_newlines\": 10,\n    \"jslint_happy\": false,\n    \"brace_style\": \"collapse\",\n    \"keep_array_indentation\": false,\n    \"keep_function_indentation\": false,\n    \"space_before_conditional\": true,\n    \"break_chained_methods\": false,\n    \"eval_code\": false,\n    \"unescape_strings\": false,\n    \"wrap_line_length\": 0\n}\n```\n\nIn addition to CLI arguments, you may pass config to the JS executable via:\n\n * any `jsbeautify_`-prefixed environment variables\n * a `JSON`-formatted file indicated by the `--config` parameter\n * a `.jsbeautifyrc` file containing `JSON` data at any level of the filesystem above `$PWD`\n\nConfiguration sources provided earlier in this stack will override later ones.\n\nYou might notice that the CLI options and defaults hash aren't 100% correlated. Historically, the Python and JS APIs have not been 100% identical. For example, `space_before_conditional` is currently JS-only, and not addressable from the CLI script. There are a few other additional cases keeping us from 100% API-compatibility. Patches welcome!\n\n#### CSS & HTML\n\nIn addition to the `js-beautify` executable, `css-beautify` and `html-beautify` are also provided as an easy interface into those scripts. Alternatively, `js-beautify --css` or `js-beautify --html` will accomplish the same thing, respectively.\n\n```js\n// Programmatic access\nvar beautify_js = require('js-beautify'); // also available under \"js\" export\nvar beautify_css = require('js-beautify').css;\nvar beautify_html = require('js-beautify').html;\n\n// All methods accept two arguments, the string to be beautified, and an options object.\n```\n\nThe CSS & HTML beautifiers are much simpler in scope, and possess far fewer options.\n\n```text\nCSS Beautifier Options:\n  -s, --indent-size             Indentation size [4]\n  -c, --indent-char             Indentation character [\" \"]\n\nHTML Beautifier Options:\n  -s, --indent-size             Indentation size [4]\n  -c, --indent-char             Indentation character [\" \"]\n  -b, --brace-style             [collapse|expand|end-expand] [\"collapse\"]\n  -S, --indent-scripts          [keep|separate|normal] [\"normal\"]\n  -W, --max-char                Maximum characters per line (0 disables) [250]\n  -U, --unformatted             List of tags (defaults to inline) that should not be reformatted\n```\n\n## License\n\nYou are free to use this in any way you want, in case you find this\nuseful or working for you. (MIT)\n\n## Credits\n\nWritten by Einar Lielmanis, <einar@jsbeautifier.org>\nPython version flourished by Stefano Sanfilippo <a.little.coder@gmail.com>\n\nThanks to Jason Diamond, Patrick Hof, Nochum Sossonko, Andreas Schneider, Dave\nVasilevsky, Vital Batmanov, Ron Baldwin, Gabriel Harrison, Chris J. Shull,\nMathias Bynens, Vittorio Gambaletta and others.\n","readmeFilename":"README.md","_id":"js-beautify@0.4.1","dist":{"shasum":"8de77bdc34cb999d56a597603780fb173313261d","tarball":"http://registry.npmjs.org/js-beautify/-/js-beautify-0.4.1.tgz"},"_from":".","_npmVersion":"1.2.11","_npmUser":{"name":"evocateur","email":"daniel.stockman@gmail.com"},"maintainers":[{"name":"evocateur","email":"daniel.stockman@gmail.com"}],"deprecated":"major indenting and html bug fixes in 1.4.0."},"0.4.2":{"name":"js-beautify","version":"0.4.2","description":"jsbeautifier.org for node","main":"index.js","preferGlobal":true,"bin":{"css-beautify":"./cli.js","html-beautify":"./cli.js","js-beautify":"./cli.js"},"directories":{"test":"tests"},"scripts":{"test":"node ./tests/beautify-tests.js"},"bugs":"https://github.com/einars/js-beautify/issues","homepage":"http://jsbeautifier.org/","repository":{"type":"git","url":"git://github.com/einars/js-beautify.git"},"keywords":["beautify","beautifier","code-quality"],"author":{"name":"Einar Lielmanis","email":"einar@jsbeautifier.org"},"contributors":[{"name":"Vital Batmanov","email":"vital76@gmail.com"},{"name":"Chris J. Shull","email":"chrisjshull@gmail.com"},{"name":"Gian Marco Gherardi","email":"gianmarco.gherardi@gmail.com"},{"name":"Stan","email":"stasson@orc.ru"},{"name":"Vittorio Gambaletta","email":"VittGam@vittgam.net"},{"name":"Daniel Stockman","email":"daniel.stockman@gmail.com"},{"name":"Liam Newman","email":"bitwiseman@gmail.com"}],"license":"MIT","dependencies":{"config-chain":"~1.1.5","nopt":"~2.1.1"},"readme":"# JS Beautifier\n\n...or, more specifically, all of the code powering\n[jsbeautifier.org](http://jsbeautifier.org/).\n\nThis little beautifier will reformat and reindent bookmarklets, ugly\nJavaScript, unpack scripts packed by Dean Edward’s popular packer,\nas well as deobfuscate scripts processed by\n[javascriptobfuscator.com](http://javascriptobfuscator.com/).\n\n## Usage\n\nTo beautify from the command-line you can use the provided Python script/library or [npm](http://npmjs.org/) package.\n\n### Python\n\n`./js-beautify file.js` beautifies a file, output goes to `stdout`.\n\nTo use `jsbeautifier` as a library is simple:\n\n``` python\nimport jsbeautifier\nres = jsbeautifier.beautify('your javascript string')\nres = jsbeautifier.beautify_file('some_file.js')\n```\n\n...or, to specify some options:\n\n``` python\nopts = jsbeautifier.default_options()\nopts.indent_size = 2\nres = jsbeautifier.beautify('some javascript', opts)\n```\n\n### JavaScript\n\nAs an alternative to the Python script, you may install the NPM package `js-beautify`. When installed globally, it provides an executable `js-beautify` script. As with the Python script, the beautified result is sent to `stdout` unless otherwise configured.\n\n```bash\n$ npm -g install js-beautify\n$ js-beautify foo.js\n```\n\nYou can also use `js-beautify` as a `node` library (install locally, the `npm` default):\n\n```bash\n$ npm install js-beautify\n```\n\n```js\nvar beautify = require('js-beautify').js_beautify,\n    fs = require('fs');\n\nfs.readFile('foo.js', 'utf8', function (err, data) {\n    if (err) {\n        throw err;\n    }\n    console.log(beautify(data, { indent_size: 2 }));\n});\n```\n\n### Options\n\nThese are the command-line flags for both Python and JS scripts:\n\n```text\nCLI Options:\n  -f, --file                    Input file(s) (Pass '-' for stdin). These can also be passed directly.\n  -r, --replace                 Write output in-place, replacing input\n  -o, --outfile                 Write output to file (default stdout)\n  --config                      Path to config file\n  --type                        [js|css|html] [\"js\"]\n  -q, --quiet                   Suppress logging to stdout\n  -v, --version                 Show the version\n  -h, --help                    Show this help\n\nBeautifier Options:\n  -s, --indent-size             Indentation size [4]\n  -c, --indent-char             Indentation character [\" \"]\n  -l, --indent-level            Initial indentation level [0]\n  -t, --indent-with-tabs        Indent with tabs, overrides -s and -c\n  -p, --preserve-newlines       Preserve existing line-breaks (--no-preserve-newlines disables)\n  -m, --max-preserve-newlines   Maximum number of line-breaks to be preserved in one chunk [10]\n  -j, --jslint-happy            Enable jslint-stricter mode\n  -b, --brace-style             [collapse|expand|end-expand|expand-strict] [\"collapse\"]\n  -B, --break-chained-methods   Break chained method calls across subsequent lines\n  -k, --keep-array-indentation  Preserve array indentation\n  -x, --unescape-strings        Decode printable characters encoded in xNN notation\n  -w, --wrap-line-length        Wrap lines at next opportunity after N characters [0]\n  --good-stuff                  Warm the cockles of Crockford's heart\n```\n\nThese largely correspond to the underscored option keys for both library interfaces, which have these defaults:\n\n```json\n{\n    \"indent_size\": 4,\n    \"indent_char\": \" \",\n    \"indent_level\": 0,\n    \"indent_with_tabs\": false,\n    \"preserve_newlines\": true,\n    \"max_preserve_newlines\": 10,\n    \"jslint_happy\": false,\n    \"brace_style\": \"collapse\",\n    \"keep_array_indentation\": false,\n    \"keep_function_indentation\": false,\n    \"space_before_conditional\": true,\n    \"break_chained_methods\": false,\n    \"eval_code\": false,\n    \"unescape_strings\": false,\n    \"wrap_line_length\": 0\n}\n```\n\nIn addition to CLI arguments, you may pass config to the JS executable via:\n\n * any `jsbeautify_`-prefixed environment variables\n * a `JSON`-formatted file indicated by the `--config` parameter\n * a `.jsbeautifyrc` file containing `JSON` data at any level of the filesystem above `$PWD`\n\nConfiguration sources provided earlier in this stack will override later ones.\n\nYou might notice that the CLI options and defaults hash aren't 100% correlated. Historically, the Python and JS APIs have not been 100% identical. For example, `space_before_conditional` is currently JS-only, and not addressable from the CLI script. There are a few other additional cases keeping us from 100% API-compatibility. Patches welcome!\n\n#### CSS & HTML\n\nIn addition to the `js-beautify` executable, `css-beautify` and `html-beautify` are also provided as an easy interface into those scripts. Alternatively, `js-beautify --css` or `js-beautify --html` will accomplish the same thing, respectively.\n\n```js\n// Programmatic access\nvar beautify_js = require('js-beautify'); // also available under \"js\" export\nvar beautify_css = require('js-beautify').css;\nvar beautify_html = require('js-beautify').html;\n\n// All methods accept two arguments, the string to be beautified, and an options object.\n```\n\nThe CSS & HTML beautifiers are much simpler in scope, and possess far fewer options.\n\n```text\nCSS Beautifier Options:\n  -s, --indent-size             Indentation size [4]\n  -c, --indent-char             Indentation character [\" \"]\n\nHTML Beautifier Options:\n  -s, --indent-size             Indentation size [4]\n  -c, --indent-char             Indentation character [\" \"]\n  -b, --brace-style             [collapse|expand|end-expand] [\"collapse\"]\n  -S, --indent-scripts          [keep|separate|normal] [\"normal\"]\n  -W, --max-char                Maximum characters per line (0 disables) [250]\n  -U, --unformatted             List of tags (defaults to inline) that should not be reformatted\n```\n\n## License\n\nYou are free to use this in any way you want, in case you find this\nuseful or working for you. (MIT)\n\n## Credits\n\nWritten by Einar Lielmanis, <einar@jsbeautifier.org>\nPython version flourished by Stefano Sanfilippo <a.little.coder@gmail.com>\n\nThanks to Jason Diamond, Patrick Hof, Nochum Sossonko, Andreas Schneider, Dave\nVasilevsky, Vital Batmanov, Ron Baldwin, Gabriel Harrison, Chris J. Shull,\nMathias Bynens, Vittorio Gambaletta and others.\n","readmeFilename":"README.md","_id":"js-beautify@0.4.2","dist":{"shasum":"cb2e7cedfe44d6e257832abb2a433c516e147183","tarball":"http://registry.npmjs.org/js-beautify/-/js-beautify-0.4.2.tgz"},"_from":".","_npmVersion":"1.2.11","_npmUser":{"name":"evocateur","email":"daniel.stockman@gmail.com"},"maintainers":[{"name":"evocateur","email":"daniel.stockman@gmail.com"},{"name":"bitwiseman","email":"bitwiseman@gmail.com"}],"deprecated":"major indenting and html bug fixes in 1.4.0."},"1.2.0":{"name":"js-beautify","version":"1.2.0","description":"jsbeautifier.org for node","main":"index.js","preferGlobal":true,"bin":{"css-beautify":"./bin/css-beautify.js","html-beautify":"./bin/html-beautify.js","js-beautify":"./bin/js-beautify.js"},"directories":{"test":"tests"},"scripts":{"test":"node ./tests/node-beautify-tests.js"},"bugs":"https://github.com/einars/js-beautify/issues","homepage":"http://jsbeautifier.org/","repository":{"type":"git","url":"git://github.com/einars/js-beautify.git"},"keywords":["beautify","beautifier","code-quality"],"author":{"name":"Einar Lielmanis","email":"einar@jsbeautifier.org"},"contributors":[{"name":"Vital Batmanov","email":"vital76@gmail.com"},{"name":"Chris J. Shull","email":"chrisjshull@gmail.com"},{"name":"Gian Marco Gherardi","email":"gianmarco.gherardi@gmail.com"},{"name":"Stan","email":"stasson@orc.ru"},{"name":"Vittorio Gambaletta","email":"VittGam@vittgam.net"},{"name":"Daniel Stockman","email":"daniel.stockman@gmail.com"},{"name":"Harutyun Amirjanyan","email":"amirjanyan@gmail.com"},{"name":"Nochum Sossonko","email":"nsossonko@hotmail.com"},{"name":"Liam Newman","email":"bitwiseman@gmail.com"}],"license":"MIT","dependencies":{"config-chain":"~1.1.5","nopt":"~2.1.1"},"devDependencies":{"jshint":"1.1.0"},"readme":"# JS Beautifier\n[![Build Status](https://secure.travis-ci.org/einars/js-beautify.png?branch=master)](http://travis-ci.org/einars/js-beautify)\n[![NPM version](https://badge.fury.io/js/js-beautify.png)](http://badge.fury.io/js/js-beautify)\n\n...or, more specifically, all of the code powering\n[jsbeautifier.org](http://jsbeautifier.org/).\n\nThis little beautifier will reformat and reindent bookmarklets, ugly\nJavaScript, unpack scripts packed by Dean Edward’s popular packer,\nas well as deobfuscate scripts processed by\n[javascriptobfuscator.com](http://javascriptobfuscator.com/).\n\n## Usage\n\nTo beautify from the command-line you can use the provided Python script/library or [npm](http://npmjs.org/) package.\n\n### Python\n\n`./js-beautify file.js` beautifies a file, output goes to `stdout`.\n\nTo use `jsbeautifier` as a library is simple:\n\n``` python\nimport jsbeautifier\nres = jsbeautifier.beautify('your javascript string')\nres = jsbeautifier.beautify_file('some_file.js')\n```\n\n...or, to specify some options:\n\n``` python\nopts = jsbeautifier.default_options()\nopts.indent_size = 2\nres = jsbeautifier.beautify('some javascript', opts)\n```\n\n### JavaScript\n\nAs an alternative to the Python script, you may install the NPM package `js-beautify`. When installed globally, it provides an executable `js-beautify` script. As with the Python script, the beautified result is sent to `stdout` unless otherwise configured.\n\n```bash\n$ npm -g install js-beautify\n$ js-beautify foo.js\n```\n\nYou can also use `js-beautify` as a `node` library (install locally, the `npm` default):\n\n```bash\n$ npm install js-beautify\n```\n\n```js\nvar beautify = require('js-beautify').js_beautify,\n    fs = require('fs');\n\nfs.readFile('foo.js', 'utf8', function (err, data) {\n    if (err) {\n        throw err;\n    }\n    console.log(beautify(data, { indent_size: 2 }));\n});\n```\n\n### Options\n\nThese are the command-line flags for both Python and JS scripts:\n\n```text\nCLI Options:\n  -f, --file                    Input file(s) (Pass '-' for stdin). These can also be passed directly.\n  -r, --replace                 Write output in-place, replacing input\n  -o, --outfile                 Write output to file (default stdout)\n  --config                      Path to config file\n  --type                        [js|css|html] [\"js\"]\n  -q, --quiet                   Suppress logging to stdout\n  -v, --version                 Show the version\n  -h, --help                    Show this help\n\nBeautifier Options:\n  -s, --indent-size             Indentation size [4]\n  -c, --indent-char             Indentation character [\" \"]\n  -l, --indent-level            Initial indentation level [0]\n  -t, --indent-with-tabs        Indent with tabs, overrides -s and -c\n  -p, --preserve-newlines       Preserve existing line-breaks (--no-preserve-newlines disables)\n  -m, --max-preserve-newlines   Maximum number of line-breaks to be preserved in one chunk [10]\n  -j, --jslint-happy            Enable jslint-stricter mode\n  -b, --brace-style             [collapse|expand|end-expand|expand-strict] [\"collapse\"]\n  -B, --break-chained-methods   Break chained method calls across subsequent lines\n  -k, --keep-array-indentation  Preserve array indentation\n  -x, --unescape-strings        Decode printable characters encoded in xNN notation\n  -w, --wrap-line-length        Wrap lines at next opportunity after N characters [0]\n  --good-stuff                  Warm the cockles of Crockford's heart\n```\n\nThese largely correspond to the underscored option keys for both library interfaces, which have these defaults:\n\n```json\n{\n    \"indent_size\": 4,\n    \"indent_char\": \" \",\n    \"indent_level\": 0,\n    \"indent_with_tabs\": false,\n    \"preserve_newlines\": true,\n    \"max_preserve_newlines\": 10,\n    \"jslint_happy\": false,\n    \"brace_style\": \"collapse\",\n    \"keep_array_indentation\": false,\n    \"keep_function_indentation\": false,\n    \"space_before_conditional\": true,\n    \"break_chained_methods\": false,\n    \"eval_code\": false,\n    \"unescape_strings\": false,\n    \"wrap_line_length\": 0\n}\n```\n\nIn addition to CLI arguments, you may pass config to the JS executable via:\n\n * any `jsbeautify_`-prefixed environment variables\n * a `JSON`-formatted file indicated by the `--config` parameter\n * a `.jsbeautifyrc` file containing `JSON` data at any level of the filesystem above `$PWD`\n\nConfiguration sources provided earlier in this stack will override later ones.\n\nYou might notice that the CLI options and defaults hash aren't 100% correlated. Historically, the Python and JS APIs have not been 100% identical. For example, `space_before_conditional` is currently JS-only, and not addressable from the CLI script. There are a few other additional cases keeping us from 100% API-compatibility. Patches welcome!\n\n#### CSS & HTML\n\nIn addition to the `js-beautify` executable, `css-beautify` and `html-beautify` are also provided as an easy interface into those scripts. Alternatively, `js-beautify --css` or `js-beautify --html` will accomplish the same thing, respectively.\n\n```js\n// Programmatic access\nvar beautify_js = require('js-beautify'); // also available under \"js\" export\nvar beautify_css = require('js-beautify').css;\nvar beautify_html = require('js-beautify').html;\n\n// All methods accept two arguments, the string to be beautified, and an options object.\n```\n\nThe CSS & HTML beautifiers are much simpler in scope, and possess far fewer options.\n\n```text\nCSS Beautifier Options:\n  -s, --indent-size             Indentation size [4]\n  -c, --indent-char             Indentation character [\" \"]\n\nHTML Beautifier Options:\n  -s, --indent-size             Indentation size [4]\n  -c, --indent-char             Indentation character [\" \"]\n  -b, --brace-style             [collapse|expand|end-expand] [\"collapse\"]\n  -S, --indent-scripts          [keep|separate|normal] [\"normal\"]\n  -W, --max-char                Maximum characters per line (0 disables) [250]\n  -U, --unformatted             List of tags (defaults to inline) that should not be reformatted\n```\n\n## License\n\nYou are free to use this in any way you want, in case you find this\nuseful or working for you. (MIT)\n\n## Credits\n\nWritten by Einar Lielmanis, <einar@jsbeautifier.org>\nPython version flourished by Stefano Sanfilippo <a.little.coder@gmail.com>\nGeneral maintenance and expansion by Liam Newman <bitwiseman@gmail.com>\nCommand-line for node.js by Daniel Stockman <daniel.stockman@gmail.com>\n\nThanks to Jason Diamond, Patrick Hof, Nochum Sossonko, Andreas Schneider, Dave\nVasilevsky, Vital Batmanov, Ron Baldwin, Gabriel Harrison, Chris J. Shull,\nMathias Bynens, Vittorio Gambaletta and others.\n","readmeFilename":"README.md","_id":"js-beautify@1.2.0","dist":{"shasum":"cc241c9077d7307d4477283cf7ddbd7df42fa17c","tarball":"http://registry.npmjs.org/js-beautify/-/js-beautify-1.2.0.tgz"},"_from":".","_npmVersion":"1.2.14","_npmUser":{"name":"bitwiseman","email":"bitwiseman@gmail.com"},"maintainers":[{"name":"evocateur","email":"daniel.stockman@gmail.com"},{"name":"bitwiseman","email":"bitwiseman@gmail.com"}],"deprecated":"major indenting and html bug fixes in 1.4.0."},"1.3.0":{"name":"js-beautify","version":"1.3.0","description":"jsbeautifier.org for node","main":"js/index.js","preferGlobal":true,"bin":{"css-beautify":"./js/bin/css-beautify.js","html-beautify":"./js/bin/html-beautify.js","js-beautify":"./js/bin/js-beautify.js"},"directories":{"lib":"js/lib","test":"js/test"},"scripts":{"test":"./js/test/shell-smoke-test.sh && node ./js/test/node-beautify-tests.js","update-codemirror":"npm install codemirror && rm -rf ./web/third-party/codemirror && cp -r ./node_modules/codemirror ./web/third-party && git add -Av ./web/third-party/codemirror"},"bugs":"https://github.com/einars/js-beautify/issues","homepage":"http://jsbeautifier.org/","repository":{"type":"git","url":"git://github.com/einars/js-beautify.git"},"keywords":["beautify","beautifier","code-quality"],"author":{"name":"Einar Lielmanis","email":"einar@jsbeautifier.org"},"contributors":[{"name":"Vital Batmanov","email":"vital76@gmail.com"},{"name":"Chris J. Shull","email":"chrisjshull@gmail.com"},{"name":"Gian Marco Gherardi","email":"gianmarco.gherardi@gmail.com"},{"name":"Stan","email":"stasson@orc.ru"},{"name":"Vittorio Gambaletta","email":"VittGam@vittgam.net"},{"name":"Daniel Stockman","email":"daniel.stockman@gmail.com"},{"name":"Harutyun Amirjanyan","email":"amirjanyan@gmail.com"},{"name":"Nochum Sossonko","email":"nsossonko@hotmail.com"},{"name":"Liam Newman","email":"bitwiseman@gmail.com"}],"license":"MIT","dependencies":{"config-chain":"~1.1.5","nopt":"~2.1.1"},"devDependencies":{"jshint":"1.1.0"},"readme":"# JS Beautifier\n[![Build Status](https://secure.travis-ci.org/einars/js-beautify.png?branch=master)](http://travis-ci.org/einars/js-beautify)\n[![NPM version](https://badge.fury.io/js/js-beautify.png)](http://badge.fury.io/js/js-beautify)\n\nThis little beautifier will reformat and reindent bookmarklets, ugly\nJavaScript, unpack scripts packed by Dean Edward’s popular packer,\nas well as deobfuscate scripts processed by\n[javascriptobfuscator.com](http://javascriptobfuscator.com/).\n\n# Usage\nYou can beautify javascript using JS Beautifier in your web browser, or on the command-line using node.js or python. \n\n## Web Browser \nOpen [jsbeautifier.org](http://jsbeautifier.org/).  Options are available via the UI. \n\n## Python\nTo beautify using python:\n\n```bash\n$ pip install jsbeautifier\n$ js-beautify file.js \n```\n\nBeautified output goes to `stdout`.\n\nTo use `jsbeautifier` as a library is simple:\n\n``` python\nimport jsbeautifier\nres = jsbeautifier.beautify('your javascript string')\nres = jsbeautifier.beautify_file('some_file.js')\n```\n\n...or, to specify some options:\n\n``` python\nopts = jsbeautifier.default_options()\nopts.indent_size = 2\nres = jsbeautifier.beautify('some javascript', opts)\n```\n\n## JavaScript\n\nAs an alternative to the Python script, you may install the NPM package `js-beautify`. When installed globally, it provides an executable `js-beautify` script. As with the Python script, the beautified result is sent to `stdout` unless otherwise configured.\n\n```bash\n$ npm -g install js-beautify\n$ js-beautify foo.js\n```\n\nYou can also use `js-beautify` as a `node` library (install locally, the `npm` default):\n\n```bash\n$ npm install js-beautify\n```\n\n```js\nvar beautify = require('js-beautify').js_beautify,\n    fs = require('fs');\n\nfs.readFile('foo.js', 'utf8', function (err, data) {\n    if (err) {\n        throw err;\n    }\n    console.log(beautify(data, { indent_size: 2 }));\n});\n```\n\n## Options\n\nThese are the command-line flags for both Python and JS scripts:\n\n```text\nCLI Options:\n  -f, --file                    Input file(s) (Pass '-' for stdin). These can also be passed directly.\n  -r, --replace                 Write output in-place, replacing input\n  -o, --outfile                 Write output to file (default stdout)\n  --config                      Path to config file\n  --type                        [js|css|html] [\"js\"]\n  -q, --quiet                   Suppress logging to stdout\n  -v, --version                 Show the version\n  -h, --help                    Show this help\n\nBeautifier Options:\n  -s, --indent-size             Indentation size [4]\n  -c, --indent-char             Indentation character [\" \"]\n  -l, --indent-level            Initial indentation level [0]\n  -t, --indent-with-tabs        Indent with tabs, overrides -s and -c\n  -p, --preserve-newlines       Preserve existing line-breaks (--no-preserve-newlines disables)\n  -m, --max-preserve-newlines   Maximum number of line-breaks to be preserved in one chunk [10]\n  -j, --jslint-happy            Enable jslint-stricter mode\n  -b, --brace-style             [collapse|expand|end-expand|expand-strict] [\"collapse\"]\n  -B, --break-chained-methods   Break chained method calls across subsequent lines\n  -k, --keep-array-indentation  Preserve array indentation\n  -x, --unescape-strings        Decode printable characters encoded in xNN notation\n  -w, --wrap-line-length        Wrap lines at next opportunity after N characters [0]\n  --good-stuff                  Warm the cockles of Crockford's heart\n```\n\nThese largely correspond to the underscored option keys for both library interfaces, which have these defaults:\n\n```json\n{\n    \"indent_size\": 4,\n    \"indent_char\": \" \",\n    \"indent_level\": 0,\n    \"indent_with_tabs\": false,\n    \"preserve_newlines\": true,\n    \"max_preserve_newlines\": 10,\n    \"jslint_happy\": false,\n    \"brace_style\": \"collapse\",\n    \"keep_array_indentation\": false,\n    \"keep_function_indentation\": false,\n    \"space_before_conditional\": true,\n    \"break_chained_methods\": false,\n    \"eval_code\": false,\n    \"unescape_strings\": false,\n    \"wrap_line_length\": 0\n}\n```\n\nIn addition to CLI arguments, you may pass config to the JS executable via:\n\n * any `jsbeautify_`-prefixed environment variables\n * a `JSON`-formatted file indicated by the `--config` parameter\n * a `.jsbeautifyrc` file containing `JSON` data at any level of the filesystem above `$PWD`\n\nConfiguration sources provided earlier in this stack will override later ones.\n\nYou might notice that the CLI options and defaults hash aren't 100% correlated. Historically, the Python and JS APIs have not been 100% identical. For example, `space_before_conditional` is currently JS-only, and not addressable from the CLI script. There are a few other additional cases keeping us from 100% API-compatibility. Patches welcome!\n\n### CSS & HTML\n\nIn addition to the `js-beautify` executable, `css-beautify` and `html-beautify` are also provided as an easy interface into those scripts. Alternatively, `js-beautify --css` or `js-beautify --html` will accomplish the same thing, respectively.\n\n```js\n// Programmatic access\nvar beautify_js = require('js-beautify'); // also available under \"js\" export\nvar beautify_css = require('js-beautify').css;\nvar beautify_html = require('js-beautify').html;\n\n// All methods accept two arguments, the string to be beautified, and an options object.\n```\n\nThe CSS & HTML beautifiers are much simpler in scope, and possess far fewer options.\n\n```text\nCSS Beautifier Options:\n  -s, --indent-size             Indentation size [4]\n  -c, --indent-char             Indentation character [\" \"]\n\nHTML Beautifier Options:\n  -s, --indent-size             Indentation size [4]\n  -c, --indent-char             Indentation character [\" \"]\n  -b, --brace-style             [collapse|expand|end-expand] [\"collapse\"]\n  -S, --indent-scripts          [keep|separate|normal] [\"normal\"]\n  -W, --max-char                Maximum characters per line (0 disables) [250]\n  -U, --unformatted             List of tags (defaults to inline) that should not be reformatted\n```\n\n# License\n\nYou are free to use this in any way you want, in case you find this\nuseful or working for you but you must keep the copyright notice and license. (MIT)\n\n# Credits\n\n* Written by Einar Lielmanis, <einar@jsbeautifier.org>\n* Python version flourished by Stefano Sanfilippo <a.little.coder@gmail.com>\n* General maintenance and expansion by Liam Newman <bitwiseman@gmail.com>\n* Command-line for node.js by Daniel Stockman <daniel.stockman@gmail.com>\n\nThanks also to Jason Diamond, Patrick Hof, Nochum Sossonko, Andreas Schneider, Dave\nVasilevsky, Vital Batmanov, Ron Baldwin, Gabriel Harrison, Chris J. Shull,\nMathias Bynens, Vittorio Gambaletta and others.\n","readmeFilename":"README.md","_id":"js-beautify@1.3.0","dist":{"shasum":"7306dc8b3413579a5d11e7f4b2e3d5cccd3c18dc","tarball":"http://registry.npmjs.org/js-beautify/-/js-beautify-1.3.0.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"bitwiseman","email":"bitwiseman@gmail.com"},"maintainers":[{"name":"evocateur","email":"daniel.stockman@gmail.com"},{"name":"bitwiseman","email":"bitwiseman@gmail.com"}],"deprecated":"major indenting and html bug fixes in 1.4.0."},"1.3.1":{"name":"js-beautify","version":"1.3.1","description":"jsbeautifier.org for node","main":"js/index.js","preferGlobal":true,"bin":{"css-beautify":"./js/bin/css-beautify.js","html-beautify":"./js/bin/html-beautify.js","js-beautify":"./js/bin/js-beautify.js"},"directories":{"lib":"js/lib","test":"js/test"},"scripts":{"test":"./js/test/shell-smoke-test.sh && node ./js/test/node-beautify-tests.js","update-codemirror":"npm install codemirror && rm -rf ./web/third-party/codemirror && cp -r ./node_modules/codemirror ./web/third-party && git add -Av ./web/third-party/codemirror"},"bugs":"https://github.com/einars/js-beautify/issues","homepage":"http://jsbeautifier.org/","repository":{"type":"git","url":"git://github.com/einars/js-beautify.git"},"keywords":["beautify","beautifier","code-quality"],"author":{"name":"Einar Lielmanis","email":"einar@jsbeautifier.org"},"contributors":[{"name":"Vital Batmanov","email":"vital76@gmail.com"},{"name":"Chris J. Shull","email":"chrisjshull@gmail.com"},{"name":"Gian Marco Gherardi","email":"gianmarco.gherardi@gmail.com"},{"name":"Stan","email":"stasson@orc.ru"},{"name":"Vittorio Gambaletta","email":"VittGam@vittgam.net"},{"name":"Daniel Stockman","email":"daniel.stockman@gmail.com"},{"name":"Harutyun Amirjanyan","email":"amirjanyan@gmail.com"},{"name":"Nochum Sossonko","email":"nsossonko@hotmail.com"},{"name":"Liam Newman","email":"bitwiseman@gmail.com"}],"license":"MIT","dependencies":{"config-chain":"~1.1.5","nopt":"~2.1.1"},"devDependencies":{"jshint":"1.1.0"},"readme":"# JS Beautifier\n[![Build Status](https://secure.travis-ci.org/einars/js-beautify.png?branch=master)](http://travis-ci.org/einars/js-beautify)\n[![NPM version](https://badge.fury.io/js/js-beautify.png)](http://badge.fury.io/js/js-beautify)\n\nThis little beautifier will reformat and reindent bookmarklets, ugly\nJavaScript, unpack scripts packed by Dean Edward’s popular packer,\nas well as deobfuscate scripts processed by\n[javascriptobfuscator.com](http://javascriptobfuscator.com/).\n\n# Usage\nYou can beautify javascript using JS Beautifier in your web browser, or on the command-line using node.js or python. \n\n## Web Browser \nOpen [jsbeautifier.org](http://jsbeautifier.org/).  Options are available via the UI. \n\n## Python\nTo beautify using python:\n\n```bash\n$ pip install jsbeautifier\n$ js-beautify file.js \n```\n\nBeautified output goes to `stdout`.\n\nTo use `jsbeautifier` as a library is simple:\n\n``` python\nimport jsbeautifier\nres = jsbeautifier.beautify('your javascript string')\nres = jsbeautifier.beautify_file('some_file.js')\n```\n\n...or, to specify some options:\n\n``` python\nopts = jsbeautifier.default_options()\nopts.indent_size = 2\nres = jsbeautifier.beautify('some javascript', opts)\n```\n\n## JavaScript\n\nAs an alternative to the Python script, you may install the NPM package `js-beautify`. When installed globally, it provides an executable `js-beautify` script. As with the Python script, the beautified result is sent to `stdout` unless otherwise configured.\n\n```bash\n$ npm -g install js-beautify\n$ js-beautify foo.js\n```\n\nYou can also use `js-beautify` as a `node` library (install locally, the `npm` default):\n\n```bash\n$ npm install js-beautify\n```\n\n```js\nvar beautify = require('js-beautify').js_beautify,\n    fs = require('fs');\n\nfs.readFile('foo.js', 'utf8', function (err, data) {\n    if (err) {\n        throw err;\n    }\n    console.log(beautify(data, { indent_size: 2 }));\n});\n```\n\n## Options\n\nThese are the command-line flags for both Python and JS scripts:\n\n```text\nCLI Options:\n  -f, --file                    Input file(s) (Pass '-' for stdin). These can also be passed directly.\n  -r, --replace                 Write output in-place, replacing input\n  -o, --outfile                 Write output to file (default stdout)\n  --config                      Path to config file\n  --type                        [js|css|html] [\"js\"]\n  -q, --quiet                   Suppress logging to stdout\n  -v, --version                 Show the version\n  -h, --help                    Show this help\n\nBeautifier Options:\n  -s, --indent-size             Indentation size [4]\n  -c, --indent-char             Indentation character [\" \"]\n  -l, --indent-level            Initial indentation level [0]\n  -t, --indent-with-tabs        Indent with tabs, overrides -s and -c\n  -p, --preserve-newlines       Preserve existing line-breaks (--no-preserve-newlines disables)\n  -m, --max-preserve-newlines   Maximum number of line-breaks to be preserved in one chunk [10]\n  -j, --jslint-happy            Enable jslint-stricter mode\n  -b, --brace-style             [collapse|expand|end-expand|expand-strict] [\"collapse\"]\n  -B, --break-chained-methods   Break chained method calls across subsequent lines\n  -k, --keep-array-indentation  Preserve array indentation\n  -x, --unescape-strings        Decode printable characters encoded in xNN notation\n  -w, --wrap-line-length        Wrap lines at next opportunity after N characters [0]\n  --good-stuff                  Warm the cockles of Crockford's heart\n```\n\nThese largely correspond to the underscored option keys for both library interfaces, which have these defaults:\n\n```json\n{\n    \"indent_size\": 4,\n    \"indent_char\": \" \",\n    \"indent_level\": 0,\n    \"indent_with_tabs\": false,\n    \"preserve_newlines\": true,\n    \"max_preserve_newlines\": 10,\n    \"jslint_happy\": false,\n    \"brace_style\": \"collapse\",\n    \"keep_array_indentation\": false,\n    \"keep_function_indentation\": false,\n    \"space_before_conditional\": true,\n    \"break_chained_methods\": false,\n    \"eval_code\": false,\n    \"unescape_strings\": false,\n    \"wrap_line_length\": 0\n}\n```\n\nIn addition to CLI arguments, you may pass config to the JS executable via:\n\n * any `jsbeautify_`-prefixed environment variables\n * a `JSON`-formatted file indicated by the `--config` parameter\n * a `.jsbeautifyrc` file containing `JSON` data at any level of the filesystem above `$PWD`\n\nConfiguration sources provided earlier in this stack will override later ones.\n\nYou might notice that the CLI options and defaults hash aren't 100% correlated. Historically, the Python and JS APIs have not been 100% identical. For example, `space_before_conditional` is currently JS-only, and not addressable from the CLI script. There are a few other additional cases keeping us from 100% API-compatibility. Patches welcome!\n\n### CSS & HTML\n\nIn addition to the `js-beautify` executable, `css-beautify` and `html-beautify` are also provided as an easy interface into those scripts. Alternatively, `js-beautify --css` or `js-beautify --html` will accomplish the same thing, respectively.\n\n```js\n// Programmatic access\nvar beautify_js = require('js-beautify'); // also available under \"js\" export\nvar beautify_css = require('js-beautify').css;\nvar beautify_html = require('js-beautify').html;\n\n// All methods accept two arguments, the string to be beautified, and an options object.\n```\n\nThe CSS & HTML beautifiers are much simpler in scope, and possess far fewer options.\n\n```text\nCSS Beautifier Options:\n  -s, --indent-size             Indentation size [4]\n  -c, --indent-char             Indentation character [\" \"]\n\nHTML Beautifier Options:\n  -s, --indent-size             Indentation size [4]\n  -c, --indent-char             Indentation character [\" \"]\n  -b, --brace-style             [collapse|expand|end-expand] [\"collapse\"]\n  -S, --indent-scripts          [keep|separate|normal] [\"normal\"]\n  -W, --max-char                Maximum characters per line (0 disables) [250]\n  -U, --unformatted             List of tags (defaults to inline) that should not be reformatted\n```\n\n# License\n\nYou are free to use this in any way you want, in case you find this\nuseful or working for you but you must keep the copyright notice and license. (MIT)\n\n# Credits\n\n* Written by Einar Lielmanis, <einar@jsbeautifier.org>\n* Python version flourished by Stefano Sanfilippo <a.little.coder@gmail.com>\n* General maintenance and expansion by Liam Newman <bitwiseman@gmail.com>\n* Command-line for node.js by Daniel Stockman <daniel.stockman@gmail.com>\n\nThanks also to Jason Diamond, Patrick Hof, Nochum Sossonko, Andreas Schneider, Dave\nVasilevsky, Vital Batmanov, Ron Baldwin, Gabriel Harrison, Chris J. Shull,\nMathias Bynens, Vittorio Gambaletta and others.\n","readmeFilename":"README.md","_id":"js-beautify@1.3.1","dist":{"shasum":"384fae58699a60fc7c8a371f351490cd15e8830c","tarball":"http://registry.npmjs.org/js-beautify/-/js-beautify-1.3.1.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"bitwiseman","email":"bitwiseman@gmail.com"},"maintainers":[{"name":"evocateur","email":"daniel.stockman@gmail.com"},{"name":"bitwiseman","email":"bitwiseman@gmail.com"}],"deprecated":"major indenting and html bug fixes in 1.4.0."},"1.3.2":{"name":"js-beautify","version":"1.3.2","description":"jsbeautifier.org for node","main":"js/index.js","preferGlobal":true,"bin":{"css-beautify":"./js/bin/css-beautify.js","html-beautify":"./js/bin/html-beautify.js","js-beautify":"./js/bin/js-beautify.js"},"directories":{"lib":"js/lib","test":"js/test"},"scripts":{"test":"./js/test/shell-smoke-test.sh && node ./js/test/node-beautify-tests.js","update-codemirror":"npm install codemirror && rm -rf ./web/third-party/codemirror/* && cp ./node_modules/codemirror/LICENSE ./web/third-party/codemirror/ && cp ./node_modules/codemirror/README.md ./web/third-party/codemirror/ && cp -r ./node_modules/codemirror/lib ./web/third-party/codemirror/ && mkdir -p ./web/third-party/codemirror/mode && cp -r ./node_modules/codemirror/mode/javascript ./web/third-party/codemirror/mode/ && git add -Av ./web/third-party/codemirror"},"bugs":{"url":"https://github.com/einars/js-beautify/issues"},"homepage":"http://jsbeautifier.org/","repository":{"type":"git","url":"git://github.com/einars/js-beautify.git"},"keywords":["beautify","beautifier","code-quality"],"author":{"name":"Einar Lielmanis","email":"einar@jsbeautifier.org"},"contributors":[{"name":"Vital Batmanov","email":"vital76@gmail.com"},{"name":"Chris J. Shull","email":"chrisjshull@gmail.com"},{"name":"Gian Marco Gherardi","email":"gianmarco.gherardi@gmail.com"},{"name":"Stan","email":"stasson@orc.ru"},{"name":"Vittorio Gambaletta","email":"VittGam@vittgam.net"},{"name":"Daniel Stockman","email":"daniel.stockman@gmail.com"},{"name":"Harutyun Amirjanyan","email":"amirjanyan@gmail.com"},{"name":"Nochum Sossonko","email":"nsossonko@hotmail.com"},{"name":"Liam Newman","email":"bitwiseman@gmail.com"}],"license":"MIT","dependencies":{"config-chain":"~1.1.5","nopt":"~2.1.1"},"devDependencies":{"jshint":"1.1.0"},"readme":"# JS Beautifier\n[![Build Status](https://secure.travis-ci.org/einars/js-beautify.png?branch=master)](http://travis-ci.org/einars/js-beautify)\n[![NPM version](https://badge.fury.io/js/js-beautify.png)](http://badge.fury.io/js/js-beautify)\n\nThis little beautifier will reformat and reindent bookmarklets, ugly\nJavaScript, unpack scripts packed by Dean Edward’s popular packer,\nas well as deobfuscate scripts processed by\n[javascriptobfuscator.com](http://javascriptobfuscator.com/).\n\n# Usage\nYou can beautify javascript using JS Beautifier in your web browser, or on the command-line using node.js or python.\n\n## Web Browser\nOpen [jsbeautifier.org](http://jsbeautifier.org/).  Options are available via the UI.\n\n## Python\nTo beautify using python:\n\n```bash\n$ pip install jsbeautifier\n$ js-beautify file.js\n```\n\nBeautified output goes to `stdout`.\n\nTo use `jsbeautifier` as a library is simple:\n\n``` python\nimport jsbeautifier\nres = jsbeautifier.beautify('your javascript string')\nres = jsbeautifier.beautify_file('some_file.js')\n```\n\n...or, to specify some options:\n\n``` python\nopts = jsbeautifier.default_options()\nopts.indent_size = 2\nres = jsbeautifier.beautify('some javascript', opts)\n```\n\n## JavaScript\n\nAs an alternative to the Python script, you may install the NPM package `js-beautify`. When installed globally, it provides an executable `js-beautify` script. As with the Python script, the beautified result is sent to `stdout` unless otherwise configured.\n\n```bash\n$ npm -g install js-beautify\n$ js-beautify foo.js\n```\n\nYou can also use `js-beautify` as a `node` library (install locally, the `npm` default):\n\n```bash\n$ npm install js-beautify\n```\n\n```js\nvar beautify = require('js-beautify').js_beautify,\n    fs = require('fs');\n\nfs.readFile('foo.js', 'utf8', function (err, data) {\n    if (err) {\n        throw err;\n    }\n    console.log(beautify(data, { indent_size: 2 }));\n});\n```\n\n## Options\n\nThese are the command-line flags for both Python and JS scripts:\n\n```text\nCLI Options:\n  -f, --file                    Input file(s) (Pass '-' for stdin). These can also be passed directly.\n  -r, --replace                 Write output in-place, replacing input\n  -o, --outfile                 Write output to file (default stdout)\n  --config                      Path to config file\n  --type                        [js|css|html] [\"js\"]\n  -q, --quiet                   Suppress logging to stdout\n  -v, --version                 Show the version\n  -h, --help                    Show this help\n\nBeautifier Options:\n  -s, --indent-size             Indentation size [4]\n  -c, --indent-char             Indentation character [\" \"]\n  -l, --indent-level            Initial indentation level [0]\n  -t, --indent-with-tabs        Indent with tabs, overrides -s and -c\n  -p, --preserve-newlines       Preserve existing line-breaks (--no-preserve-newlines disables)\n  -m, --max-preserve-newlines   Maximum number of line-breaks to be preserved in one chunk [10]\n  -j, --jslint-happy            Enable jslint-stricter mode\n  -b, --brace-style             [collapse|expand|end-expand] [\"collapse\"]\n  -B, --break-chained-methods   Break chained method calls across subsequent lines\n  -k, --keep-array-indentation  Preserve array indentation\n  -x, --unescape-strings        Decode printable characters encoded in xNN notation\n  -w, --wrap-line-length        Wrap lines at next opportunity after N characters [0]\n  --good-stuff                  Warm the cockles of Crockford's heart\n```\n\nThese largely correspond to the underscored option keys for both library interfaces, which have these defaults:\n\n```json\n{\n    \"indent_size\": 4,\n    \"indent_char\": \" \",\n    \"indent_level\": 0,\n    \"indent_with_tabs\": false,\n    \"preserve_newlines\": true,\n    \"max_preserve_newlines\": 10,\n    \"jslint_happy\": false,\n    \"brace_style\": \"collapse\",\n    \"keep_array_indentation\": false,\n    \"keep_function_indentation\": false,\n    \"space_before_conditional\": true,\n    \"break_chained_methods\": false,\n    \"eval_code\": false,\n    \"unescape_strings\": false,\n    \"wrap_line_length\": 0\n}\n```\n\nIn addition to CLI arguments, you may pass config to the JS executable via:\n\n * any `jsbeautify_`-prefixed environment variables\n * a `JSON`-formatted file indicated by the `--config` parameter\n * a `.jsbeautifyrc` file containing `JSON` data at any level of the filesystem above `$PWD`\n\nConfiguration sources provided earlier in this stack will override later ones.\n\nYou might notice that the CLI options and defaults hash aren't 100% correlated. Historically, the Python and JS APIs have not been 100% identical. For example, `space_before_conditional` is currently JS-only, and not addressable from the CLI script. There are a few other additional cases keeping us from 100% API-compatibility. Patches welcome!\n\n### CSS & HTML\n\nIn addition to the `js-beautify` executable, `css-beautify` and `html-beautify` are also provided as an easy interface into those scripts. Alternatively, `js-beautify --css` or `js-beautify --html` will accomplish the same thing, respectively.\n\n```js\n// Programmatic access\nvar beautify_js = require('js-beautify'); // also available under \"js\" export\nvar beautify_css = require('js-beautify').css;\nvar beautify_html = require('js-beautify').html;\n\n// All methods accept two arguments, the string to be beautified, and an options object.\n```\n\nThe CSS & HTML beautifiers are much simpler in scope, and possess far fewer options.\n\n```text\nCSS Beautifier Options:\n  -s, --indent-size             Indentation size [4]\n  -c, --indent-char             Indentation character [\" \"]\n\nHTML Beautifier Options:\n  -s, --indent-size             Indentation size [4]\n  -c, --indent-char             Indentation character [\" \"]\n  -b, --brace-style             [collapse|expand|end-expand] [\"collapse\"]\n  -S, --indent-scripts          [keep|separate|normal] [\"normal\"]\n  -W, --max-char                Maximum characters per line (0 disables) [250]\n  -U, --unformatted             List of tags (defaults to inline) that should not be reformatted\n```\n\n# License\n\nYou are free to use this in any way you want, in case you find this\nuseful or working for you but you must keep the copyright notice and license. (MIT)\n\n# Credits\n\n* Written by Einar Lielmanis, <einar@jsbeautifier.org>\n* Python version flourished by Stefano Sanfilippo <a.little.coder@gmail.com>\n* General maintenance and expansion by Liam Newman <bitwiseman@gmail.com>\n* Command-line for node.js by Daniel Stockman <daniel.stockman@gmail.com>\n\nThanks also to Jason Diamond, Patrick Hof, Nochum Sossonko, Andreas Schneider, Dave\nVasilevsky, Vital Batmanov, Ron Baldwin, Gabriel Harrison, Chris J. Shull,\nMathias Bynens, Vittorio Gambaletta and others.\n","readmeFilename":"README.md","_id":"js-beautify@1.3.2","dist":{"shasum":"4f2ec149213fabaa03a659b2217334629b9297e3","tarball":"http://registry.npmjs.org/js-beautify/-/js-beautify-1.3.2.tgz"},"_from":".","_npmVersion":"1.2.19","_npmUser":{"name":"bitwiseman","email":"bitwiseman@gmail.com"},"maintainers":[{"name":"evocateur","email":"daniel.stockman@gmail.com"},{"name":"bitwiseman","email":"bitwiseman@gmail.com"}],"deprecated":"major indenting and html bug fixes in 1.4.0."},"1.3.3":{"name":"js-beautify","version":"1.3.3","description":"jsbeautifier.org for node","main":"js/index.js","preferGlobal":true,"bin":{"css-beautify":"./js/bin/css-beautify.js","html-beautify":"./js/bin/html-beautify.js","js-beautify":"./js/bin/js-beautify.js"},"directories":{"lib":"js/lib","test":"js/test"},"scripts":{"test":"./js/test/shell-smoke-test.sh && node ./js/test/node-beautify-tests.js","update-codemirror":"npm install codemirror && rm -rf ./web/third-party/codemirror/* && cp ./node_modules/codemirror/LICENSE ./web/third-party/codemirror/ && cp ./node_modules/codemirror/README.md ./web/third-party/codemirror/ && cp -r ./node_modules/codemirror/lib ./web/third-party/codemirror/ && mkdir -p ./web/third-party/codemirror/mode && cp -r ./node_modules/codemirror/mode/javascript ./web/third-party/codemirror/mode/ && git add -Av ./web/third-party/codemirror"},"bugs":{"url":"https://github.com/einars/js-beautify/issues"},"homepage":"http://jsbeautifier.org/","repository":{"type":"git","url":"git://github.com/einars/js-beautify.git"},"keywords":["beautify","beautifier","code-quality"],"author":{"name":"Einar Lielmanis","email":"einar@jsbeautifier.org"},"contributors":[{"name":"Vital Batmanov","email":"vital76@gmail.com"},{"name":"Chris J. Shull","email":"chrisjshull@gmail.com"},{"name":"Gian Marco Gherardi","email":"gianmarco.gherardi@gmail.com"},{"name":"Stan","email":"stasson@orc.ru"},{"name":"Vittorio Gambaletta","email":"VittGam@vittgam.net"},{"name":"Daniel Stockman","email":"daniel.stockman@gmail.com"},{"name":"Harutyun Amirjanyan","email":"amirjanyan@gmail.com"},{"name":"Nochum Sossonko","email":"nsossonko@hotmail.com"},{"name":"Liam Newman","email":"bitwiseman@gmail.com"}],"license":"MIT","dependencies":{"config-chain":"~1.1.5","nopt":"~2.1.1"},"devDependencies":{"jshint":"1.1.0"},"readme":"# JS Beautifier\n[![Build Status](https://secure.travis-ci.org/einars/js-beautify.png?branch=master)](http://travis-ci.org/einars/js-beautify)\n[![NPM version](https://badge.fury.io/js/js-beautify.png)](http://badge.fury.io/js/js-beautify)\n\nThis little beautifier will reformat and reindent bookmarklets, ugly\nJavaScript, unpack scripts packed by Dean Edward’s popular packer,\nas well as deobfuscate scripts processed by\n[javascriptobfuscator.com](http://javascriptobfuscator.com/).\n\n# Usage\nYou can beautify javascript using JS Beautifier in your web browser, or on the command-line using node.js or python.\n\n## Web Browser\nOpen [jsbeautifier.org](http://jsbeautifier.org/).  Options are available via the UI.\n\n## Python\nTo beautify using python:\n\n```bash\n$ pip install jsbeautifier\n$ js-beautify file.js\n```\n\nBeautified output goes to `stdout`.\n\nTo use `jsbeautifier` as a library is simple:\n\n``` python\nimport jsbeautifier\nres = jsbeautifier.beautify('your javascript string')\nres = jsbeautifier.beautify_file('some_file.js')\n```\n\n...or, to specify some options:\n\n``` python\nopts = jsbeautifier.default_options()\nopts.indent_size = 2\nres = jsbeautifier.beautify('some javascript', opts)\n```\n\n## JavaScript\n\nAs an alternative to the Python script, you may install the NPM package `js-beautify`. When installed globally, it provides an executable `js-beautify` script. As with the Python script, the beautified result is sent to `stdout` unless otherwise configured.\n\n```bash\n$ npm -g install js-beautify\n$ js-beautify foo.js\n```\n\nYou can also use `js-beautify` as a `node` library (install locally, the `npm` default):\n\n```bash\n$ npm install js-beautify\n```\n\n```js\nvar beautify = require('js-beautify').js_beautify,\n    fs = require('fs');\n\nfs.readFile('foo.js', 'utf8', function (err, data) {\n    if (err) {\n        throw err;\n    }\n    console.log(beautify(data, { indent_size: 2 }));\n});\n```\n\n## Options\n\nThese are the command-line flags for both Python and JS scripts:\n\n```text\nCLI Options:\n  -f, --file                    Input file(s) (Pass '-' for stdin). These can also be passed directly.\n  -r, --replace                 Write output in-place, replacing input\n  -o, --outfile                 Write output to file (default stdout)\n  --config                      Path to config file\n  --type                        [js|css|html] [\"js\"]\n  -q, --quiet                   Suppress logging to stdout\n  -v, --version                 Show the version\n  -h, --help                    Show this help\n\nBeautifier Options:\n  -s, --indent-size             Indentation size [4]\n  -c, --indent-char             Indentation character [\" \"]\n  -l, --indent-level            Initial indentation level [0]\n  -t, --indent-with-tabs        Indent with tabs, overrides -s and -c\n  -p, --preserve-newlines       Preserve existing line-breaks (--no-preserve-newlines disables)\n  -m, --max-preserve-newlines   Maximum number of line-breaks to be preserved in one chunk [10]\n  -j, --jslint-happy            Enable jslint-stricter mode\n  -b, --brace-style             [collapse|expand|end-expand] [\"collapse\"]\n  -B, --break-chained-methods   Break chained method calls across subsequent lines\n  -k, --keep-array-indentation  Preserve array indentation\n  -x, --unescape-strings        Decode printable characters encoded in xNN notation\n  -w, --wrap-line-length        Wrap lines at next opportunity after N characters [0]\n  --good-stuff                  Warm the cockles of Crockford's heart\n```\n\nThese largely correspond to the underscored option keys for both library interfaces, which have these defaults:\n\n```json\n{\n    \"indent_size\": 4,\n    \"indent_char\": \" \",\n    \"indent_level\": 0,\n    \"indent_with_tabs\": false,\n    \"preserve_newlines\": true,\n    \"max_preserve_newlines\": 10,\n    \"jslint_happy\": false,\n    \"brace_style\": \"collapse\",\n    \"keep_array_indentation\": false,\n    \"keep_function_indentation\": false,\n    \"space_before_conditional\": true,\n    \"break_chained_methods\": false,\n    \"eval_code\": false,\n    \"unescape_strings\": false,\n    \"wrap_line_length\": 0\n}\n```\n\nIn addition to CLI arguments, you may pass config to the JS executable via:\n\n * any `jsbeautify_`-prefixed environment variables\n * a `JSON`-formatted file indicated by the `--config` parameter\n * a `.jsbeautifyrc` file containing `JSON` data at any level of the filesystem above `$PWD`\n\nConfiguration sources provided earlier in this stack will override later ones.\n\nYou might notice that the CLI options and defaults hash aren't 100% correlated. Historically, the Python and JS APIs have not been 100% identical. For example, `space_before_conditional` is currently JS-only, and not addressable from the CLI script. There are a few other additional cases keeping us from 100% API-compatibility. Patches welcome!\n\n### CSS & HTML\n\nIn addition to the `js-beautify` executable, `css-beautify` and `html-beautify` are also provided as an easy interface into those scripts. Alternatively, `js-beautify --css` or `js-beautify --html` will accomplish the same thing, respectively.\n\n```js\n// Programmatic access\nvar beautify_js = require('js-beautify'); // also available under \"js\" export\nvar beautify_css = require('js-beautify').css;\nvar beautify_html = require('js-beautify').html;\n\n// All methods accept two arguments, the string to be beautified, and an options object.\n```\n\nThe CSS & HTML beautifiers are much simpler in scope, and possess far fewer options.\n\n```text\nCSS Beautifier Options:\n  -s, --indent-size             Indentation size [4]\n  -c, --indent-char             Indentation character [\" \"]\n\nHTML Beautifier Options:\n  -s, --indent-size             Indentation size [4]\n  -c, --indent-char             Indentation character [\" \"]\n  -b, --brace-style             [collapse|expand|end-expand] [\"collapse\"]\n  -S, --indent-scripts          [keep|separate|normal] [\"normal\"]\n  -W, --max-char                Maximum characters per line (0 disables) [250]\n  -U, --unformatted             List of tags (defaults to inline) that should not be reformatted\n```\n\n# License\n\nYou are free to use this in any way you want, in case you find this\nuseful or working for you but you must keep the copyright notice and license. (MIT)\n\n# Credits\n\n* Written by Einar Lielmanis, <einar@jsbeautifier.org>\n* Python version flourished by Stefano Sanfilippo <a.little.coder@gmail.com>\n* General maintenance and expansion by Liam Newman <bitwiseman@gmail.com>\n* Command-line for node.js by Daniel Stockman <daniel.stockman@gmail.com>\n\nThanks also to Jason Diamond, Patrick Hof, Nochum Sossonko, Andreas Schneider, Dave\nVasilevsky, Vital Batmanov, Ron Baldwin, Gabriel Harrison, Chris J. Shull,\nMathias Bynens, Vittorio Gambaletta and others.\n","readmeFilename":"README.md","_id":"js-beautify@1.3.3","dist":{"shasum":"2eabc05a1015dde00b5a8919dea11cf9d1a1427a","tarball":"http://registry.npmjs.org/js-beautify/-/js-beautify-1.3.3.tgz"},"_from":".","_npmVersion":"1.2.19","_npmUser":{"name":"bitwiseman","email":"bitwiseman@gmail.com"},"maintainers":[{"name":"evocateur","email":"daniel.stockman@gmail.com"},{"name":"bitwiseman","email":"bitwiseman@gmail.com"}],"deprecated":"major indenting and html bug fixes in 1.4.0."},"1.3.4":{"name":"js-beautify","version":"1.3.4","description":"jsbeautifier.org for node","main":"js/index.js","preferGlobal":true,"bin":{"css-beautify":"./js/bin/css-beautify.js","html-beautify":"./js/bin/html-beautify.js","js-beautify":"./js/bin/js-beautify.js"},"directories":{"lib":"js/lib","test":"js/test"},"scripts":{"test":"./js/test/shell-smoke-test.sh && node ./js/test/node-beautify-tests.js","update-codemirror":"npm install codemirror && rm -rf ./web/third-party/codemirror/* && cp ./node_modules/codemirror/LICENSE ./web/third-party/codemirror/ && cp ./node_modules/codemirror/README.md ./web/third-party/codemirror/ && cp -r ./node_modules/codemirror/lib ./web/third-party/codemirror/ && mkdir -p ./web/third-party/codemirror/mode && cp -r ./node_modules/codemirror/mode/javascript ./web/third-party/codemirror/mode/ && git add -Av ./web/third-party/codemirror"},"bugs":{"url":"https://github.com/einars/js-beautify/issues"},"homepage":"http://jsbeautifier.org/","repository":{"type":"git","url":"git://github.com/einars/js-beautify.git"},"keywords":["beautify","beautifier","code-quality"],"author":{"name":"Einar Lielmanis","email":"einar@jsbeautifier.org"},"contributors":[{"name":"Vital Batmanov","email":"vital76@gmail.com"},{"name":"Chris J. Shull","email":"chrisjshull@gmail.com"},{"name":"Gian Marco Gherardi","email":"gianmarco.gherardi@gmail.com"},{"name":"Stan","email":"stasson@orc.ru"},{"name":"Vittorio Gambaletta","email":"VittGam@vittgam.net"},{"name":"Daniel Stockman","email":"daniel.stockman@gmail.com"},{"name":"Harutyun Amirjanyan","email":"amirjanyan@gmail.com"},{"name":"Nochum Sossonko","email":"nsossonko@hotmail.com"},{"name":"Liam Newman","email":"bitwiseman@gmail.com"}],"license":"MIT","dependencies":{"config-chain":"~1.1.5","mkdirp":"0.3.5","nopt":"~2.1.1"},"devDependencies":{"jshint":"1.1.0"},"readme":"# JS Beautifier\n[![Build Status](https://secure.travis-ci.org/einars/js-beautify.png?branch=master)](http://travis-ci.org/einars/js-beautify)\n[![NPM version](https://badge.fury.io/js/js-beautify.png)](http://badge.fury.io/js/js-beautify)\n\nThis little beautifier will reformat and reindent bookmarklets, ugly\nJavaScript, unpack scripts packed by Dean Edward’s popular packer,\nas well as deobfuscate scripts processed by\n[javascriptobfuscator.com](http://javascriptobfuscator.com/).\n\n# Usage\nYou can beautify javascript using JS Beautifier in your web browser, or on the command-line using node.js or python.\n\n## Web Browser\nOpen [jsbeautifier.org](http://jsbeautifier.org/).  Options are available via the UI.\n\n## Python\nTo beautify using python:\n\n```bash\n$ pip install jsbeautifier\n$ js-beautify file.js\n```\n\nBeautified output goes to `stdout`.\n\nTo use `jsbeautifier` as a library is simple:\n\n``` python\nimport jsbeautifier\nres = jsbeautifier.beautify('your javascript string')\nres = jsbeautifier.beautify_file('some_file.js')\n```\n\n...or, to specify some options:\n\n``` python\nopts = jsbeautifier.default_options()\nopts.indent_size = 2\nres = jsbeautifier.beautify('some javascript', opts)\n```\n\n## JavaScript\n\nAs an alternative to the Python script, you may install the NPM package `js-beautify`. When installed globally, it provides an executable `js-beautify` script. As with the Python script, the beautified result is sent to `stdout` unless otherwise configured.\n\n```bash\n$ npm -g install js-beautify\n$ js-beautify foo.js\n```\n\nYou can also use `js-beautify` as a `node` library (install locally, the `npm` default):\n\n```bash\n$ npm install js-beautify\n```\n\n```js\nvar beautify = require('js-beautify').js_beautify,\n    fs = require('fs');\n\nfs.readFile('foo.js', 'utf8', function (err, data) {\n    if (err) {\n        throw err;\n    }\n    console.log(beautify(data, { indent_size: 2 }));\n});\n```\n\n## Options\n\nThese are the command-line flags for both Python and JS scripts:\n\n```text\nCLI Options:\n  -f, --file                    Input file(s) (Pass '-' for stdin). These can also be passed directly.\n  -r, --replace                 Write output in-place, replacing input\n  -o, --outfile                 Write output to file (default stdout)\n  --config                      Path to config file\n  --type                        [js|css|html] [\"js\"]\n  -q, --quiet                   Suppress logging to stdout\n  -v, --version                 Show the version\n  -h, --help                    Show this help\n\nBeautifier Options:\n  -s, --indent-size             Indentation size [4]\n  -c, --indent-char             Indentation character [\" \"]\n  -l, --indent-level            Initial indentation level [0]\n  -t, --indent-with-tabs        Indent with tabs, overrides -s and -c\n  -p, --preserve-newlines       Preserve existing line-breaks (--no-preserve-newlines disables)\n  -m, --max-preserve-newlines   Maximum number of line-breaks to be preserved in one chunk [10]\n  -j, --jslint-happy            Enable jslint-stricter mode\n  -b, --brace-style             [collapse|expand|end-expand] [\"collapse\"]\n  -B, --break-chained-methods   Break chained method calls across subsequent lines\n  -k, --keep-array-indentation  Preserve array indentation\n  -x, --unescape-strings        Decode printable characters encoded in xNN notation\n  -w, --wrap-line-length        Wrap lines at next opportunity after N characters [0]\n  --good-stuff                  Warm the cockles of Crockford's heart\n```\n\nThese largely correspond to the underscored option keys for both library interfaces, which have these defaults:\n\n```json\n{\n    \"indent_size\": 4,\n    \"indent_char\": \" \",\n    \"indent_level\": 0,\n    \"indent_with_tabs\": false,\n    \"preserve_newlines\": true,\n    \"max_preserve_newlines\": 10,\n    \"jslint_happy\": false,\n    \"brace_style\": \"collapse\",\n    \"keep_array_indentation\": false,\n    \"keep_function_indentation\": false,\n    \"space_before_conditional\": true,\n    \"break_chained_methods\": false,\n    \"eval_code\": false,\n    \"unescape_strings\": false,\n    \"wrap_line_length\": 0\n}\n```\n\nIn addition to CLI arguments, you may pass config to the JS executable via:\n\n * any `jsbeautify_`-prefixed environment variables\n * a `JSON`-formatted file indicated by the `--config` parameter\n * a `.jsbeautifyrc` file containing `JSON` data at any level of the filesystem above `$PWD`\n\nConfiguration sources provided earlier in this stack will override later ones.\n\nYou might notice that the CLI options and defaults hash aren't 100% correlated. Historically, the Python and JS APIs have not been 100% identical. For example, `space_before_conditional` is currently JS-only, and not addressable from the CLI script. There are a few other additional cases keeping us from 100% API-compatibility. Patches welcome!\n\n### CSS & HTML\n\nIn addition to the `js-beautify` executable, `css-beautify` and `html-beautify` are also provided as an easy interface into those scripts. Alternatively, `js-beautify --css` or `js-beautify --html` will accomplish the same thing, respectively.\n\n```js\n// Programmatic access\nvar beautify_js = require('js-beautify'); // also available under \"js\" export\nvar beautify_css = require('js-beautify').css;\nvar beautify_html = require('js-beautify').html;\n\n// All methods accept two arguments, the string to be beautified, and an options object.\n```\n\nThe CSS & HTML beautifiers are much simpler in scope, and possess far fewer options.\n\n```text\nCSS Beautifier Options:\n  -s, --indent-size             Indentation size [4]\n  -c, --indent-char             Indentation character [\" \"]\n\nHTML Beautifier Options:\n  -s, --indent-size             Indentation size [4]\n  -c, --indent-char             Indentation character [\" \"]\n  -b, --brace-style             [collapse|expand|end-expand] [\"collapse\"]\n  -S, --indent-scripts          [keep|separate|normal] [\"normal\"]\n  -W, --max-char                Maximum characters per line (0 disables) [250]\n  -U, --unformatted             List of tags (defaults to inline) that should not be reformatted\n```\n\n# License\n\nYou are free to use this in any way you want, in case you find this\nuseful or working for you but you must keep the copyright notice and license. (MIT)\n\n# Credits\n\n* Written by Einar Lielmanis, <einar@jsbeautifier.org>\n* Python version flourished by Stefano Sanfilippo <a.little.coder@gmail.com>\n* General maintenance and expansion by Liam Newman <bitwiseman@gmail.com>\n* Command-line for node.js by Daniel Stockman <daniel.stockman@gmail.com>\n\nThanks also to Jason Diamond, Patrick Hof, Nochum Sossonko, Andreas Schneider, Dave\nVasilevsky, Vital Batmanov, Ron Baldwin, Gabriel Harrison, Chris J. Shull,\nMathias Bynens, Vittorio Gambaletta and others.\n","readmeFilename":"README.md","_id":"js-beautify@1.3.4","dist":{"shasum":"ed6c4eeed3418944d3a2c40e76a32dbd48755283","tarball":"http://registry.npmjs.org/js-beautify/-/js-beautify-1.3.4.tgz"},"_from":".","_npmVersion":"1.2.19","_npmUser":{"name":"bitwiseman","email":"bitwiseman@gmail.com"},"maintainers":[{"name":"evocateur","email":"daniel.stockman@gmail.com"},{"name":"bitwiseman","email":"bitwiseman@gmail.com"}],"deprecated":"major indenting and html bug fixes in 1.4.0."},"1.4.0":{"name":"js-beautify","version":"1.4.0","description":"jsbeautifier.org for node","main":"js/index.js","preferGlobal":true,"bin":{"css-beautify":"./js/bin/css-beautify.js","html-beautify":"./js/bin/html-beautify.js","js-beautify":"./js/bin/js-beautify.js"},"directories":{"lib":"js/lib","test":"js/test"},"scripts":{"test":"./js/test/shell-smoke-test.sh && node ./js/test/node-beautify-tests.js","update-codemirror":"npm install codemirror && rm -rf ./web/third-party/codemirror/* && cp ./node_modules/codemirror/LICENSE ./web/third-party/codemirror/ && cp ./node_modules/codemirror/README.md ./web/third-party/codemirror/ && cp -r ./node_modules/codemirror/lib ./web/third-party/codemirror/ && mkdir -p ./web/third-party/codemirror/mode && cp -r ./node_modules/codemirror/mode/javascript ./web/third-party/codemirror/mode/ && git add -Av ./web/third-party/codemirror"},"bugs":{"url":"https://github.com/einars/js-beautify/issues"},"homepage":"http://jsbeautifier.org/","repository":{"type":"git","url":"git://github.com/einars/js-beautify.git"},"keywords":["beautify","beautifier","code-quality"],"author":{"name":"Einar Lielmanis","email":"einar@jsbeautifier.org"},"contributors":[{"name":"Vital Batmanov","email":"vital76@gmail.com"},{"name":"Chris J. Shull","email":"chrisjshull@gmail.com"},{"name":"Gian Marco Gherardi","email":"gianmarco.gherardi@gmail.com"},{"name":"Stan","email":"stasson@orc.ru"},{"name":"Vittorio Gambaletta","email":"VittGam@vittgam.net"},{"name":"Daniel Stockman","email":"daniel.stockman@gmail.com"},{"name":"Harutyun Amirjanyan","email":"amirjanyan@gmail.com"},{"name":"Nochum Sossonko","email":"nsossonko@hotmail.com"},{"name":"Liam Newman","email":"bitwiseman@gmail.com"}],"license":"MIT","dependencies":{"config-chain":"~1.1.5","mkdirp":"0.3.5","nopt":"~2.1.1"},"devDependencies":{"jshint":"1.1.0"},"readme":"# JS Beautifier\n[![Build Status](https://secure.travis-ci.org/einars/js-beautify.png?branch=master)](http://travis-ci.org/einars/js-beautify)\n[![NPM version](https://badge.fury.io/js/js-beautify.png)](http://badge.fury.io/js/js-beautify)\n\nThis little beautifier will reformat and reindent bookmarklets, ugly\nJavaScript, unpack scripts packed by Dean Edward’s popular packer,\nas well as deobfuscate scripts processed by\n[javascriptobfuscator.com](http://javascriptobfuscator.com/).\n\n# Usage\nYou can beautify javascript using JS Beautifier in your web browser, or on the command-line using node.js or python.\n\n## Web Browser\nOpen [jsbeautifier.org](http://jsbeautifier.org/).  Options are available via the UI.\n\n## Python\nTo beautify using python:\n\n```bash\n$ pip install jsbeautifier\n$ js-beautify file.js\n```\n\nBeautified output goes to `stdout`.\n\nTo use `jsbeautifier` as a library is simple:\n\n``` python\nimport jsbeautifier\nres = jsbeautifier.beautify('your javascript string')\nres = jsbeautifier.beautify_file('some_file.js')\n```\n\n...or, to specify some options:\n\n``` python\nopts = jsbeautifier.default_options()\nopts.indent_size = 2\nres = jsbeautifier.beautify('some javascript', opts)\n```\n\n## JavaScript\n\nAs an alternative to the Python script, you may install the NPM package `js-beautify`. When installed globally, it provides an executable `js-beautify` script. As with the Python script, the beautified result is sent to `stdout` unless otherwise configured.\n\n```bash\n$ npm -g install js-beautify\n$ js-beautify foo.js\n```\n\nYou can also use `js-beautify` as a `node` library (install locally, the `npm` default):\n\n```bash\n$ npm install js-beautify\n```\n\n```js\nvar beautify = require('js-beautify').js_beautify,\n    fs = require('fs');\n\nfs.readFile('foo.js', 'utf8', function (err, data) {\n    if (err) {\n        throw err;\n    }\n    console.log(beautify(data, { indent_size: 2 }));\n});\n```\n\n## Options\n\nThese are the command-line flags for both Python and JS scripts:\n\n```text\nCLI Options:\n  -f, --file       Input file(s) (Pass '-' for stdin)\n  -r, --replace    Write output in-place, replacing input\n  -o, --outfile    Write output to file (default stdout)\n  --config         Path to config file\n  --type           [js|css|html] [\"js\"]\n  -q, --quiet      Suppress logging to stdout\n  -h, --help       Show this help\n  -v, --version    Show the version\n\nBeautifier Options:\n  -s, --indent-size             Indentation size [4]\n  -c, --indent-char             Indentation character [\" \"]\n  -l, --indent-level            Initial indentation level [0]\n  -t, --indent-with-tabs        Indent with tabs, overrides -s and -c\n  -p, --preserve-newlines       Preserve line-breaks (--no-preserve-newlines disables)\n  -m, --max-preserve-newlines   Number of line-breaks to be preserved in one chunk [10]\n  -P, --space-in-paren          Add padding spaces within paren, ie. f( a, b )\n  -j, --jslint-happy            Enable jslint-stricter mode\n  -b, --brace-style             [collapse|expand|end-expand] [\"collapse\"]\n  -B, --break-chained-methods   Break chained method calls across subsequent lines\n  -k, --keep-array-indentation  Preserve array indentation\n  -x, --unescape-strings        Decode printable characters encoded in xNN notation\n  -w, --wrap-line-length        Wrap lines at next opportunity after N characters [0]\n  -X, --e4x                     Pass E4X xml literals through untouched\n  --good-stuff                  Warm the cockles of Crockford's heart\n```\n\nThese largely correspond to the underscored option keys for both library interfaces, which have these defaults:\n\n```json\n{\n    \"indent_size\": 4,\n    \"indent_char\": \" \",\n    \"indent_level\": 0,\n    \"indent_with_tabs\": false,\n    \"preserve_newlines\": true,\n    \"max_preserve_newlines\": 10,\n    \"jslint_happy\": false,\n    \"brace_style\": \"collapse\",\n    \"keep_array_indentation\": false,\n    \"keep_function_indentation\": false,\n    \"space_before_conditional\": true,\n    \"break_chained_methods\": false,\n    \"eval_code\": false,\n    \"unescape_strings\": false,\n    \"wrap_line_length\": 0\n}\n```\n\nIn addition to CLI arguments, you may pass config to the JS executable via:\n\n * any `jsbeautify_`-prefixed environment variables\n * a `JSON`-formatted file indicated by the `--config` parameter\n * a `.jsbeautifyrc` file containing `JSON` data at any level of the filesystem above `$PWD`\n\nConfiguration sources provided earlier in this stack will override later ones.\n\nYou might notice that the CLI options and defaults hash aren't 100% correlated. Historically, the Python and JS APIs have not been 100% identical. For example, `space_before_conditional` is currently JS-only, and not addressable from the CLI script. There are a few other additional cases keeping us from 100% API-compatibility. Patches welcome!\n\n### CSS & HTML\n\nIn addition to the `js-beautify` executable, `css-beautify` and `html-beautify` are also provided as an easy interface into those scripts. Alternatively, `js-beautify --css` or `js-beautify --html` will accomplish the same thing, respectively.\n\n```js\n// Programmatic access\nvar beautify_js = require('js-beautify'); // also available under \"js\" export\nvar beautify_css = require('js-beautify').css;\nvar beautify_html = require('js-beautify').html;\n\n// All methods accept two arguments, the string to be beautified, and an options object.\n```\n\nThe CSS & HTML beautifiers are much simpler in scope, and possess far fewer options.\n\n```text\nCSS Beautifier Options:\n  -s, --indent-size             Indentation size [4]\n  -c, --indent-char             Indentation character [\" \"]\n\nHTML Beautifier Options:\n  -s, --indent-size             Indentation size [4]\n  -c, --indent-char             Indentation character [\" \"]\n  -b, --brace-style             [collapse|expand|end-expand] [\"collapse\"]\n  -S, --indent-scripts          [keep|separate|normal] [\"normal\"]\n  -w, --wrap-line-length        Maximum characters per line (0 disables) [250]\n  -p, --preserve-newlines       Preserve existing line-breaks (--no-preserve-newlines disables)\n  -m, --max-preserve-newlines   Maximum number of line-breaks to be preserved in one chunk [10]\n  -U, --unformatted             List of tags (defaults to inline) that should not be reformatted\n```\n\n# License\n\nYou are free to use this in any way you want, in case you find this\nuseful or working for you but you must keep the copyright notice and license. (MIT)\n\n# Credits\n\n* Written by Einar Lielmanis, <einar@jsbeautifier.org>\n* Python version flourished by Stefano Sanfilippo <a.little.coder@gmail.com>\n* General maintenance and expansion by Liam Newman <bitwiseman@gmail.com>\n* Command-line for node.js by Daniel Stockman <daniel.stockman@gmail.com>\n\nThanks also to Jason Diamond, Patrick Hof, Nochum Sossonko, Andreas Schneider, Dave\nVasilevsky, Vital Batmanov, Ron Baldwin, Gabriel Harrison, Chris J. Shull,\nMathias Bynens, Vittorio Gambaletta and others.\njs-beautify@1.3.4\n\n","readmeFilename":"README.md","_id":"js-beautify@1.4.0","dist":{"shasum":"5f709ceaa4689d3dc93546156e093de902f4b82e","tarball":"http://registry.npmjs.org/js-beautify/-/js-beautify-1.4.0.tgz"},"_from":".","_npmVersion":"1.2.19","_npmUser":{"name":"bitwiseman","email":"bitwiseman@gmail.com"},"maintainers":[{"name":"evocateur","email":"daniel.stockman@gmail.com"},{"name":"bitwiseman","email":"bitwiseman@gmail.com"}]},"1.4.1":{"name":"js-beautify","version":"1.4.1","description":"jsbeautifier.org for node","main":"js/index.js","preferGlobal":true,"bin":{"css-beautify":"./js/bin/css-beautify.js","html-beautify":"./js/bin/html-beautify.js","js-beautify":"./js/bin/js-beautify.js"},"directories":{"lib":"js/lib","test":"js/test"},"scripts":{"test":"./js/test/shell-smoke-test.sh && node ./js/test/node-beautify-tests.js","update-codemirror":"npm install codemirror && rm -rf ./web/third-party/codemirror/* && cp ./node_modules/codemirror/LICENSE ./web/third-party/codemirror/ && cp ./node_modules/codemirror/README.md ./web/third-party/codemirror/ && cp -r ./node_modules/codemirror/lib ./web/third-party/codemirror/ && mkdir -p ./web/third-party/codemirror/mode && cp -r ./node_modules/codemirror/mode/javascript ./web/third-party/codemirror/mode/ && git add -Av ./web/third-party/codemirror"},"bugs":{"url":"https://github.com/einars/js-beautify/issues"},"homepage":"http://jsbeautifier.org/","repository":{"type":"git","url":"git://github.com/einars/js-beautify.git"},"keywords":["beautify","beautifier","code-quality"],"author":{"name":"Einar Lielmanis","email":"einar@jsbeautifier.org"},"contributors":[{"name":"Vital Batmanov","email":"vital76@gmail.com"},{"name":"Chris J. Shull","email":"chrisjshull@gmail.com"},{"name":"Gian Marco Gherardi","email":"gianmarco.gherardi@gmail.com"},{"name":"Stan","email":"stasson@orc.ru"},{"name":"Vittorio Gambaletta","email":"VittGam@vittgam.net"},{"name":"Daniel Stockman","email":"daniel.stockman@gmail.com"},{"name":"Harutyun Amirjanyan","email":"amirjanyan@gmail.com"},{"name":"Nochum Sossonko","email":"nsossonko@hotmail.com"},{"name":"Liam Newman","email":"bitwiseman@gmail.com"}],"license":"MIT","dependencies":{"config-chain":"~1.1.5","mkdirp":"0.3.5","nopt":"~2.1.1"},"devDependencies":{"jshint":"1.1.0","node-static":"~0.7.1"},"readme":"# JS Beautifier\n[![Build Status](https://secure.travis-ci.org/einars/js-beautify.png?branch=master)](http://travis-ci.org/einars/js-beautify)\n[![NPM version](https://badge.fury.io/js/js-beautify.png)](http://badge.fury.io/js/js-beautify)\n\nThis little beautifier will reformat and reindent bookmarklets, ugly\nJavaScript, unpack scripts packed by Dean Edward’s popular packer,\nas well as deobfuscate scripts processed by\n[javascriptobfuscator.com](http://javascriptobfuscator.com/).\n\n# Usage\nYou can beautify javascript using JS Beautifier in your web browser, or on the command-line using node.js or python.\n\n## Web Browser\nOpen [jsbeautifier.org](http://jsbeautifier.org/).  Options are available via the UI.\n\n## Python\nTo beautify using python:\n\n```bash\n$ pip install jsbeautifier\n$ js-beautify file.js\n```\n\nBeautified output goes to `stdout`.\n\nTo use `jsbeautifier` as a library is simple:\n\n``` python\nimport jsbeautifier\nres = jsbeautifier.beautify('your javascript string')\nres = jsbeautifier.beautify_file('some_file.js')\n```\n\n...or, to specify some options:\n\n``` python\nopts = jsbeautifier.default_options()\nopts.indent_size = 2\nres = jsbeautifier.beautify('some javascript', opts)\n```\n\n## JavaScript\n\nAs an alternative to the Python script, you may install the NPM package `js-beautify`. When installed globally, it provides an executable `js-beautify` script. As with the Python script, the beautified result is sent to `stdout` unless otherwise configured.\n\n```bash\n$ npm -g install js-beautify\n$ js-beautify foo.js\n```\n\nYou can also use `js-beautify` as a `node` library (install locally, the `npm` default):\n\n```bash\n$ npm install js-beautify\n```\n\n```js\nvar beautify = require('js-beautify').js_beautify,\n    fs = require('fs');\n\nfs.readFile('foo.js', 'utf8', function (err, data) {\n    if (err) {\n        throw err;\n    }\n    console.log(beautify(data, { indent_size: 2 }));\n});\n```\n\n## Options\n\nThese are the command-line flags for both Python and JS scripts:\n\n```text\nCLI Options:\n  -f, --file       Input file(s) (Pass '-' for stdin)\n  -r, --replace    Write output in-place, replacing input\n  -o, --outfile    Write output to file (default stdout)\n  --config         Path to config file\n  --type           [js|css|html] [\"js\"]\n  -q, --quiet      Suppress logging to stdout\n  -h, --help       Show this help\n  -v, --version    Show the version\n\nBeautifier Options:\n  -s, --indent-size             Indentation size [4]\n  -c, --indent-char             Indentation character [\" \"]\n  -l, --indent-level            Initial indentation level [0]\n  -t, --indent-with-tabs        Indent with tabs, overrides -s and -c\n  -p, --preserve-newlines       Preserve line-breaks (--no-preserve-newlines disables)\n  -m, --max-preserve-newlines   Number of line-breaks to be preserved in one chunk [10]\n  -P, --space-in-paren          Add padding spaces within paren, ie. f( a, b )\n  -j, --jslint-happy            Enable jslint-stricter mode\n  -b, --brace-style             [collapse|expand|end-expand] [\"collapse\"]\n  -B, --break-chained-methods   Break chained method calls across subsequent lines\n  -k, --keep-array-indentation  Preserve array indentation\n  -x, --unescape-strings        Decode printable characters encoded in xNN notation\n  -w, --wrap-line-length        Wrap lines at next opportunity after N characters [0]\n  -X, --e4x                     Pass E4X xml literals through untouched\n  --good-stuff                  Warm the cockles of Crockford's heart\n```\n\nThese largely correspond to the underscored option keys for both library interfaces, which have these defaults:\n\n```json\n{\n    \"indent_size\": 4,\n    \"indent_char\": \" \",\n    \"indent_level\": 0,\n    \"indent_with_tabs\": false,\n    \"preserve_newlines\": true,\n    \"max_preserve_newlines\": 10,\n    \"jslint_happy\": false,\n    \"brace_style\": \"collapse\",\n    \"keep_array_indentation\": false,\n    \"keep_function_indentation\": false,\n    \"space_before_conditional\": true,\n    \"break_chained_methods\": false,\n    \"eval_code\": false,\n    \"unescape_strings\": false,\n    \"wrap_line_length\": 0\n}\n```\n\nIn addition to CLI arguments, you may pass config to the JS executable via:\n\n * any `jsbeautify_`-prefixed environment variables\n * a `JSON`-formatted file indicated by the `--config` parameter\n * a `.jsbeautifyrc` file containing `JSON` data at any level of the filesystem above `$PWD`\n\nConfiguration sources provided earlier in this stack will override later ones.\n\nYou might notice that the CLI options and defaults hash aren't 100% correlated. Historically, the Python and JS APIs have not been 100% identical. For example, `space_before_conditional` is currently JS-only, and not addressable from the CLI script. There are a few other additional cases keeping us from 100% API-compatibility. Patches welcome!\n\n### CSS & HTML\n\nIn addition to the `js-beautify` executable, `css-beautify` and `html-beautify` are also provided as an easy interface into those scripts. Alternatively, `js-beautify --css` or `js-beautify --html` will accomplish the same thing, respectively.\n\n```js\n// Programmatic access\nvar beautify_js = require('js-beautify'); // also available under \"js\" export\nvar beautify_css = require('js-beautify').css;\nvar beautify_html = require('js-beautify').html;\n\n// All methods accept two arguments, the string to be beautified, and an options object.\n```\n\nThe CSS & HTML beautifiers are much simpler in scope, and possess far fewer options.\n\n```text\nCSS Beautifier Options:\n  -s, --indent-size             Indentation size [4]\n  -c, --indent-char             Indentation character [\" \"]\n\nHTML Beautifier Options:\n  -I, --indent-inner-html       Indent <head> and <body> sections. Default is false.\n  -s, --indent-size             Indentation size [4]\n  -c, --indent-char             Indentation character [\" \"]\n  -b, --brace-style             [collapse|expand|end-expand] [\"collapse\"]\n  -S, --indent-scripts          [keep|separate|normal] [\"normal\"]\n  -w, --wrap-line-length        Maximum characters per line (0 disables) [250]\n  -p, --preserve-newlines       Preserve existing line-breaks (--no-preserve-newlines disables)\n  -m, --max-preserve-newlines   Maximum number of line-breaks to be preserved in one chunk [10]\n  -U, --unformatted             List of tags (defaults to inline) that should not be reformatted\n```\n\n# License\n\nYou are free to use this in any way you want, in case you find this\nuseful or working for you but you must keep the copyright notice and license. (MIT)\n\n# Credits\n\n* Written by Einar Lielmanis, <einar@jsbeautifier.org>\n* Python version flourished by Stefano Sanfilippo <a.little.coder@gmail.com>\n* General maintenance and expansion by Liam Newman <bitwiseman@gmail.com>\n* Command-line for node.js by Daniel Stockman <daniel.stockman@gmail.com>\n\nThanks also to Jason Diamond, Patrick Hof, Nochum Sossonko, Andreas Schneider, Dave\nVasilevsky, Vital Batmanov, Ron Baldwin, Gabriel Harrison, Chris J. Shull,\nMathias Bynens, Vittorio Gambaletta and others.\njs-beautify@1.3.4\n\n","readmeFilename":"README.md","_id":"js-beautify@1.4.1","dist":{"shasum":"f7b795ff762614b48485d56183d716ad4a39ec16","tarball":"http://registry.npmjs.org/js-beautify/-/js-beautify-1.4.1.tgz"},"_from":".","_npmVersion":"1.3.11","_npmUser":{"name":"bitwiseman","email":"bitwiseman@gmail.com"},"maintainers":[{"name":"evocateur","email":"daniel.stockman@gmail.com"},{"name":"bitwiseman","email":"bitwiseman@gmail.com"}]},"1.4.2":{"name":"js-beautify","version":"1.4.2","description":"jsbeautifier.org for node","main":"js/index.js","preferGlobal":true,"bin":{"css-beautify":"./js/bin/css-beautify.js","html-beautify":"./js/bin/html-beautify.js","js-beautify":"./js/bin/js-beautify.js"},"directories":{"lib":"js/lib","test":"js/test"},"scripts":{"test":"./js/test/shell-smoke-test.sh && node ./js/test/node-beautify-tests.js","update-codemirror":"npm install codemirror && rm -rf ./web/third-party/codemirror/* && cp ./node_modules/codemirror/LICENSE ./web/third-party/codemirror/ && cp ./node_modules/codemirror/README.md ./web/third-party/codemirror/ && cp -r ./node_modules/codemirror/lib ./web/third-party/codemirror/ && mkdir -p ./web/third-party/codemirror/mode && cp -r ./node_modules/codemirror/mode/javascript ./web/third-party/codemirror/mode/ && git add -Av ./web/third-party/codemirror"},"bugs":{"url":"https://github.com/einars/js-beautify/issues"},"homepage":"http://jsbeautifier.org/","repository":{"type":"git","url":"git://github.com/einars/js-beautify.git"},"keywords":["beautify","beautifier","code-quality"],"author":{"name":"Einar Lielmanis","email":"einar@jsbeautifier.org"},"contributors":[{"name":"Vital Batmanov","email":"vital76@gmail.com"},{"name":"Chris J. Shull","email":"chrisjshull@gmail.com"},{"name":"Gian Marco Gherardi","email":"gianmarco.gherardi@gmail.com"},{"name":"Stan","email":"stasson@orc.ru"},{"name":"Vittorio Gambaletta","email":"VittGam@vittgam.net"},{"name":"Daniel Stockman","email":"daniel.stockman@gmail.com"},{"name":"Harutyun Amirjanyan","email":"amirjanyan@gmail.com"},{"name":"Nochum Sossonko","email":"nsossonko@hotmail.com"},{"name":"Liam Newman","email":"bitwiseman@gmail.com"}],"license":"MIT","dependencies":{"config-chain":"~1.1.5","mkdirp":"0.3.5","nopt":"~2.1.1"},"devDependencies":{"jshint":"1.1.0","node-static":"~0.7.1"},"readme":"# JS Beautifier\n[![Build Status](https://secure.travis-ci.org/einars/js-beautify.png?branch=master)](http://travis-ci.org/einars/js-beautify)\n[![NPM version](https://badge.fury.io/js/js-beautify.png)](http://badge.fury.io/js/js-beautify)\n\nThis little beautifier will reformat and reindent bookmarklets, ugly\nJavaScript, unpack scripts packed by Dean Edward’s popular packer,\nas well as deobfuscate scripts processed by\n[javascriptobfuscator.com](http://javascriptobfuscator.com/).\n\n# Usage\nYou can beautify javascript using JS Beautifier in your web browser, or on the command-line using node.js or python.\n\n## Web Browser\nOpen [jsbeautifier.org](http://jsbeautifier.org/).  Options are available via the UI.\n\n## Python\nTo beautify using python:\n\n```bash\n$ pip install jsbeautifier\n$ js-beautify file.js\n```\n\nBeautified output goes to `stdout`.\n\nTo use `jsbeautifier` as a library is simple:\n\n``` python\nimport jsbeautifier\nres = jsbeautifier.beautify('your javascript string')\nres = jsbeautifier.beautify_file('some_file.js')\n```\n\n...or, to specify some options:\n\n``` python\nopts = jsbeautifier.default_options()\nopts.indent_size = 2\nres = jsbeautifier.beautify('some javascript', opts)\n```\n\n## JavaScript\n\nAs an alternative to the Python script, you may install the NPM package `js-beautify`. When installed globally, it provides an executable `js-beautify` script. As with the Python script, the beautified result is sent to `stdout` unless otherwise configured.\n\n```bash\n$ npm -g install js-beautify\n$ js-beautify foo.js\n```\n\nYou can also use `js-beautify` as a `node` library (install locally, the `npm` default):\n\n```bash\n$ npm install js-beautify\n```\n\n```js\nvar beautify = require('js-beautify').js_beautify,\n    fs = require('fs');\n\nfs.readFile('foo.js', 'utf8', function (err, data) {\n    if (err) {\n        throw err;\n    }\n    console.log(beautify(data, { indent_size: 2 }));\n});\n```\n\n## Options\n\nThese are the command-line flags for both Python and JS scripts:\n\n```text\nCLI Options:\n  -f, --file       Input file(s) (Pass '-' for stdin)\n  -r, --replace    Write output in-place, replacing input\n  -o, --outfile    Write output to file (default stdout)\n  --config         Path to config file\n  --type           [js|css|html] [\"js\"]\n  -q, --quiet      Suppress logging to stdout\n  -h, --help       Show this help\n  -v, --version    Show the version\n\nBeautifier Options:\n  -s, --indent-size             Indentation size [4]\n  -c, --indent-char             Indentation character [\" \"]\n  -l, --indent-level            Initial indentation level [0]\n  -t, --indent-with-tabs        Indent with tabs, overrides -s and -c\n  -p, --preserve-newlines       Preserve line-breaks (--no-preserve-newlines disables)\n  -m, --max-preserve-newlines   Number of line-breaks to be preserved in one chunk [10]\n  -P, --space-in-paren          Add padding spaces within paren, ie. f( a, b )\n  -j, --jslint-happy            Enable jslint-stricter mode\n  -b, --brace-style             [collapse|expand|end-expand] [\"collapse\"]\n  -B, --break-chained-methods   Break chained method calls across subsequent lines\n  -k, --keep-array-indentation  Preserve array indentation\n  -x, --unescape-strings        Decode printable characters encoded in xNN notation\n  -w, --wrap-line-length        Wrap lines at next opportunity after N characters [0]\n  -X, --e4x                     Pass E4X xml literals through untouched\n  --good-stuff                  Warm the cockles of Crockford's heart\n```\n\nThese largely correspond to the underscored option keys for both library interfaces, which have these defaults:\n\n```json\n{\n    \"indent_size\": 4,\n    \"indent_char\": \" \",\n    \"indent_level\": 0,\n    \"indent_with_tabs\": false,\n    \"preserve_newlines\": true,\n    \"max_preserve_newlines\": 10,\n    \"jslint_happy\": false,\n    \"brace_style\": \"collapse\",\n    \"keep_array_indentation\": false,\n    \"keep_function_indentation\": false,\n    \"space_before_conditional\": true,\n    \"break_chained_methods\": false,\n    \"eval_code\": false,\n    \"unescape_strings\": false,\n    \"wrap_line_length\": 0\n}\n```\n\nIn addition to CLI arguments, you may pass config to the JS executable via:\n\n * any `jsbeautify_`-prefixed environment variables\n * a `JSON`-formatted file indicated by the `--config` parameter\n * a `.jsbeautifyrc` file containing `JSON` data at any level of the filesystem above `$PWD`\n\nConfiguration sources provided earlier in this stack will override later ones.\n\nYou might notice that the CLI options and defaults hash aren't 100% correlated. Historically, the Python and JS APIs have not been 100% identical. For example, `space_before_conditional` is currently JS-only, and not addressable from the CLI script. There are a few other additional cases keeping us from 100% API-compatibility. Patches welcome!\n\n### CSS & HTML\n\nIn addition to the `js-beautify` executable, `css-beautify` and `html-beautify` are also provided as an easy interface into those scripts. Alternatively, `js-beautify --css` or `js-beautify --html` will accomplish the same thing, respectively.\n\n```js\n// Programmatic access\nvar beautify_js = require('js-beautify'); // also available under \"js\" export\nvar beautify_css = require('js-beautify').css;\nvar beautify_html = require('js-beautify').html;\n\n// All methods accept two arguments, the string to be beautified, and an options object.\n```\n\nThe CSS & HTML beautifiers are much simpler in scope, and possess far fewer options.\n\n```text\nCSS Beautifier Options:\n  -s, --indent-size             Indentation size [4]\n  -c, --indent-char             Indentation character [\" \"]\n\nHTML Beautifier Options:\n  -I, --indent-inner-html       Indent <head> and <body> sections. Default is false.\n  -s, --indent-size             Indentation size [4]\n  -c, --indent-char             Indentation character [\" \"]\n  -b, --brace-style             [collapse|expand|end-expand] [\"collapse\"]\n  -S, --indent-scripts          [keep|separate|normal] [\"normal\"]\n  -w, --wrap-line-length        Maximum characters per line (0 disables) [250]\n  -p, --preserve-newlines       Preserve existing line-breaks (--no-preserve-newlines disables)\n  -m, --max-preserve-newlines   Maximum number of line-breaks to be preserved in one chunk [10]\n  -U, --unformatted             List of tags (defaults to inline) that should not be reformatted\n```\n\n# License\n\nYou are free to use this in any way you want, in case you find this\nuseful or working for you but you must keep the copyright notice and license. (MIT)\n\n# Credits\n\n* Written by Einar Lielmanis, <einar@jsbeautifier.org>\n* Python version flourished by Stefano Sanfilippo <a.little.coder@gmail.com>\n* General maintenance and expansion by Liam Newman <bitwiseman@gmail.com>\n* Command-line for node.js by Daniel Stockman <daniel.stockman@gmail.com>\n\nThanks also to Jason Diamond, Patrick Hof, Nochum Sossonko, Andreas Schneider, Dave\nVasilevsky, Vital Batmanov, Ron Baldwin, Gabriel Harrison, Chris J. Shull,\nMathias Bynens, Vittorio Gambaletta and others.\njs-beautify@1.3.4\n\n","readmeFilename":"README.md","_id":"js-beautify@1.4.2","dist":{"shasum":"8882df450a9e8ecf75d227f1cceb5a8ec96896b7","tarball":"http://registry.npmjs.org/js-beautify/-/js-beautify-1.4.2.tgz"},"_from":".","_npmVersion":"1.3.11","_npmUser":{"name":"bitwiseman","email":"bitwiseman@gmail.com"},"maintainers":[{"name":"evocateur","email":"daniel.stockman@gmail.com"},{"name":"bitwiseman","email":"bitwiseman@gmail.com"}]}},"readme":"# JS Beautifier\n\n...or, more specifically, all of the code powering\n[jsbeautifier.org](http://jsbeautifier.org/).\n\nThis little beautifier will reformat and reindent bookmarklets, ugly\nJavaScript, unpack scripts packed by Dean Edward’s popular packer,\nas well as deobfuscate scripts processed by\n[javascriptobfuscator.com](http://javascriptobfuscator.com/).\n\n## Usage\n\nTo beautify from the command-line you can use the provided Python script/library or [npm](http://npmjs.org/) package.\n\n### Python\n\n`./js-beautify file.js` beautifies a file, output goes to `stdout`.\n\nTo use `jsbeautifier` as a library is simple:\n\n``` python\nimport jsbeautifier\nres = jsbeautifier.beautify('your javascript string')\nres = jsbeautifier.beautify_file('some_file.js')\n```\n\n...or, to specify some options:\n\n``` python\nopts = jsbeautifier.default_options()\nopts.indent_size = 2\nres = jsbeautifier.beautify('some javascript', opts)\n```\n\n### JavaScript\n\nAs an alternative to the Python script, you may install the NPM package `js-beautify`. When installed globally, it provides an executable `js-beautify` script. As with the Python script, the beautified result is sent to `stdout` unless otherwise configured.\n\n```bash\n$ npm -g install js-beautify\n$ js-beautify foo.js\n```\n\nYou can also use `js-beautify` as a `node` library (install locally, the `npm` default):\n\n```bash\n$ npm install js-beautify\n```\n\n```js\nvar beautify = require('js-beautify').js_beautify,\n    fs = require('fs');\n\nfs.readFile('foo.js', 'utf8', function (err, data) {\n    if (err) {\n        throw err;\n    }\n    console.log(beautify(data, { indent_size: 2 }));\n});\n```\n\n### Options\n\nThese are the command-line flags for both Python and JS scripts:\n\n    CLI Options:\n      -f, --file                    Input file(s) (Pass '-' for stdin). These can also be passed directly.\n      -r, --replace                 Write output in-place, replacing input\n      -o, --outfile                 Write output to file (default stdout)\n    \n    Beautifier Options:\n      -s, --indent-size             Indentation size [default: 4]\n      -c, --indent-char             Indentation character [default: \" \"]\n      -l, --indent-level            Initial indentation level [default: 0]\n      -t, --indent-with-tabs        Indent with tabs, overrides -s and -c\n      -p, --preserve-newlines       Preserve existing line-breaks (--no-preserve-newlines disables) [default: true]\n      -m, --max-preserve-newlines   Maximum number of line-breaks to be preserved in one chunk [default: 10]\n      -j, --jslint-happy            Enable jslint-stricter mode\n      -b, --brace-style             Brace style [collapse|expand|end-expand|expand-strict] [default: \"collapse\"]\n      -k, --keep-array-indentation  Preserve array indentation\n      -a, --indent-case             Indent case inside switch\n      -x, --unescape-strings        Decode printable characters encoded in xNN notation\n\nThese correspond to underscored option keys for both library interfaces:\n\n    defaults = {\n        \"indent_size\": 4,\n        \"indent_char\": \" \",\n        \"indent_level\": 0,\n        \"indent_with_tabs\": false,\n        \"preserve_newlines\": true,\n        \"max_preserve_newlines\": 10,\n        \"jslint_happy\": false,\n        \"brace_style\": \"collapse\",\n        \"keep_array_indentation\": false,\n        \"keep_function_indentation\": false,\n        \"space_before_conditional\": true,\n        \"eval_code\": false,\n        \"indent_case\": false,\n        \"unescape_strings\": false\n    }\n\nYou might notice that the CLI options and defaults hash aren't 100% correlated. Historically, the Python and JS APIs have not been 100% identical. For example, `space_before_conditional` is currently JS-only, and not addressable from the CLI script. There are a few other additional cases keeping us from 100% API-compatibility. Patches welcome!\n\n## License\n\nYou are free to use this in any way you want, in case you find this\nuseful or working for you. (MIT)\n\n## Credits\n\nWritten by Einar Lielmanis, <einar@jsbeautifier.org>\nPython version flourished by Stefano Sanfilippo <a.little.coder@gmail.com>\n\nThanks to Jason Diamond, Patrick Hof, Nochum Sossonko, Andreas Schneider, Dave\nVasilevsky, Vital Batmanov, Ron Baldwin, Gabriel Harrison, Chris J. Shull,\nMathias Bynens, Vittorio Gambaletta and others.\n","maintainers":[{"name":"evocateur","email":"daniel.stockman@gmail.com"},{"name":"bitwiseman","email":"bitwiseman@gmail.com"}],"time":{"modified":"2013-11-14T04:28:33.950Z","created":"2012-07-16T21:58:16.768Z","0.1.8":"2012-07-16T21:58:18.047Z","0.2.0":"2012-07-17T17:52:26.277Z","0.2.1":"2012-07-24T00:45:14.405Z","0.2.2":"2012-08-02T22:47:38.249Z","0.2.3":"2012-08-08T20:03:42.729Z","0.2.4":"2012-12-05T19:42:25.090Z","0.3.0":"2012-12-06T21:58:32.954Z","0.3.1":"2012-12-10T20:24:13.246Z","0.3.2":"2013-01-25T18:06:02.506Z","0.3.3":"2013-02-28T20:03:55.989Z","0.3.4":"2013-03-13T20:09:11.717Z","0.3.5":"2013-03-15T02:40:15.742Z","0.3.6":"2013-03-18T20:35:37.619Z","0.3.7":"2013-03-18T21:03:09.813Z","0.3.8":"2013-03-18T23:27:29.628Z","0.3.9":"2013-03-19T01:40:56.627Z","0.4.0":"2013-03-19T01:52:35.977Z","0.4.1":"2013-03-19T01:56:14.218Z","0.4.2":"2013-03-19T20:42:18.587Z","1.2.0":"2013-03-27T22:36:40.993Z","1.3.0":"2013-04-16T20:19:10.271Z","1.3.1":"2013-04-16T21:02:59.679Z","1.3.2":"2013-04-30T19:53:39.185Z","1.3.3":"2013-05-26T21:22:40.563Z","1.3.4":"2013-06-03T21:10:45.862Z","1.4.0":"2013-06-11T06:03:16.299Z","1.4.1":"2013-10-11T23:30:34.510Z","1.4.2":"2013-11-08T21:04:54.842Z"},"author":{"name":"Einar Lielmanis","email":"einar@jsbeautifier.org"},"repository":{"type":"git","url":"git://github.com/einars/js-beautify.git"},"users":{"fgribreau":true,"chrisoei":true},"_attachments":{},"_etag":"\"1X0ZTGDKQ035KSQM7BOL362KQ\""}